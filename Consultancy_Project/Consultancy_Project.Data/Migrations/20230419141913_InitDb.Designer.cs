// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    [Migration("20230419141913_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5729),
                            Institution = "Amerikan Psikoloji Derneği",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5731)
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5737),
                            Institution = "Amerikan Psikoloji Derneği (APA)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5739)
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5741),
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5742)
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5744),
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5745)
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5747),
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5748)
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5751),
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5752)
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5754),
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5755)
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5758),
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5759)
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5761),
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5762)
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5766),
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5766)
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5769),
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5769)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5415),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5417),
                            UserId = "db371fc7-33ca-4a38-b8cf-959905d73b34",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5428),
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5429),
                            UserId = "cf880548-9deb-46d6-9004-216654ddd651",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5432),
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5433),
                            UserId = "3fd9d087-584a-4d0e-8dc5-9576b75a60df",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5436),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5437),
                            UserId = "5d160224-35b5-44da-aa43-5e80aef0e972",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5440),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5441),
                            UserId = "21cf4c10-162f-43f9-8f7a-75796eb62cb4",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5446),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5447),
                            UserId = "d89001b9-dcd1-45e3-a98c-6bec5c05b3e3",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5450),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5451),
                            UserId = "259f82c1-b0af-493b-857b-16ba7d273f7b",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5344),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5345),
                            UserId = "b8e3dacd-30b8-46ea-90b3-1412459ec7f5"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5350),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5351),
                            UserId = "38346e1e-9715-4ecf-abc0-cb4a55511594"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5354),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5355),
                            UserId = "63c318f9-4d11-4bd0-bb0b-9f322b0a64b5"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5358),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5359),
                            UserId = "0c7d89a7-a1df-44f0-a021-a142bd2dbfa4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5361),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5362),
                            UserId = "40c67e4f-af51-4e89-87f7-5cdfaab0fe2c"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5507),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5508)
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5514),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5515)
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5577),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5579)
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5581),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5582)
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5585),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5586)
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5591),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5591)
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5594),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5595)
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5598),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5598)
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5601),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5602)
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5607),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5608)
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5610),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5611)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0bf85f80-8aa1-4284-82db-6bdd536a2e86",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6ad5acb5-2df8-4e44-81fb-6069c19ff853",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "a418e4a1-7041-4037-88f0-0f12019fdb66",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0c566017-e3dc-4aca-8d38-742d962f503a",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "7f61e336-5bba-4767-97ad-c29c8306a75c",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4223),
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFrx/0YlDe8Qcbmz1pRNEnlY6GyZC9mr7jNzvrVIm4MWgYe4JGZUQCBenjj+cBd7Sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19d4757e-3d22-47e9-8611-e0efdac1df86",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4238),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "db371fc7-33ca-4a38-b8cf-959905d73b34",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "7cf221f7-321b-4699-8b98-cea55cb0c569",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4277),
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECNacWqdtwn4ab07ESiBRK18zVom3e2dfCaN/3UKgUf+v+RDiBFJ1HHVxcz3H6ixqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d065bc1-9175-4ba0-a329-f65b2d0e6704",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4278),
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "cf880548-9deb-46d6-9004-216654ddd651",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "4f06b641-810e-48f6-bd82-7429e77c8ef3",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4311),
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFUybzntySDE1DCNUBFg83srGH/vn87qeSxrYx4fKk0ZlMR+mHhcFOzMyX+CJF22uQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27f820c3-284a-4bb6-9b8b-688afd6d98e7",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4312),
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "3fd9d087-584a-4d0e-8dc5-9576b75a60df",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "801337d5-a540-4019-935f-cd6ce0427b52",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4329),
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAENg+bgnPempdnAC3gCzbgKH14gXijyUBiWqttTMbB+PaQhhcPHhsziRZkNiM31mKhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e61cfd2-07d3-4174-980c-3e5f7af4c26e",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4329),
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "5d160224-35b5-44da-aa43-5e80aef0e972",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "136a7ff8-9e2f-4fb6-9b30-dbe820018706",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4346),
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAED2s3rOFSl4dOvw5YkVsK7rosjDzcJ4cMgvotKO8FguiYDnoEr4HxSo3xHuLeQCHfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a94eaf62-5ebd-448b-90a8-920179c68e0f",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4347),
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "21cf4c10-162f-43f9-8f7a-75796eb62cb4",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "2f90e6a7-fdb6-42ed-9e97-fdf240629120",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4366),
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENk505QniKCrWYldkTNpGitJfvgjeOqvVUp0D4UkDSfC6PGpKai1r9f04UTqrzfYTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3c7fd5b-12b5-456f-95aa-18fae4ecc4f9",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4367),
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "d89001b9-dcd1-45e3-a98c-6bec5c05b3e3",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "17440cfc-8bc3-42d3-9c0d-7201d80e3fce",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4381),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAEODheUt4LSBVF//GZk15sh9Yu7diJ+NIDYuMYpLvWtDDQAmOz8aZ7CyJf9pefHIpVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a83214a9-e523-4667-a197-301958898112",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4381),
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "259f82c1-b0af-493b-857b-16ba7d273f7b",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "2098ea9f-5e46-4ac4-a405-22b4ce44beeb",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4398),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZKbgdwAybPxypIoyc9Oy7ap3n2W5Ti2LmjD82T+J85S4cHCDqprFilrC661xIYZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f720e521-5192-42f0-8cb1-6674e2b0ce29",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4399),
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "b8e3dacd-30b8-46ea-90b3-1412459ec7f5",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "b8dac4e2-2fda-44d3-8abf-ea996e264636",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4413),
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHuBIB6odSBdKhkMOjSCZVj0X/3RT3HtqAN0F66mk94Z0/5DartRWCESbf8MUSAaSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ee4a45d-a4b1-4e28-bc07-78c16685f708",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4414),
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "38346e1e-9715-4ecf-abc0-cb4a55511594",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "320b3a7b-1abb-47e4-aa78-053309d5eb9d",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4450),
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAENtfdFjNRATzzSla5zxXCYrbBfqGmI7iS9gSmr6cWYWT1bDKBvDF1my9BJ4QwqjywA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48c02e26-22d7-4345-b5a8-6d0c924fc09b",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4451),
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "63c318f9-4d11-4bd0-bb0b-9f322b0a64b5",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "3c67e40e-be61-4eba-86c4-629a94acb4ac",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4470),
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKGYacynp6xL11LXWRaI+2lt1IbO0hlUR0Ktqh6gMpVIMo5cS7nXNgvXODfXUK9buA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d373d97-fec8-4347-85a2-af96835b69da",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4471),
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "0c7d89a7-a1df-44f0-a021-a142bd2dbfa4",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "f266da7e-5a05-4963-95ac-0c724c3b66f2",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4642),
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAEKs9YI+WwtC1ALmkt4JcUuxL8gPUTlvE0EhiCPZPa0o7TDrp7rZmU7P5H/+4fK7EgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e7e0850-37d9-4f80-bd63-49f6d450b01d",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4643),
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "40c67e4f-af51-4e89-87f7-5cdfaab0fe2c",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "8f2cf075-2048-42d9-a782-04f654023818",
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4662),
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIwn3zhxSwB3hI3tCY17TZR/xWjWagCCqkv1BixrIOoFEZqQG2skk6QUJe82yT1W7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "017bceeb-8621-4ae1-ac57-a469345b1a47",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(4663),
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5981),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5983),
                            Url = "1.jpg",
                            UserId = "0c566017-e3dc-4aca-8d38-742d962f503a"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5989),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5990),
                            Url = "2.jpg",
                            UserId = "db371fc7-33ca-4a38-b8cf-959905d73b34"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5993),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5993),
                            Url = "3.jpg",
                            UserId = "cf880548-9deb-46d6-9004-216654ddd651"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5996),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5997),
                            Url = "4.jpg",
                            UserId = "3fd9d087-584a-4d0e-8dc5-9576b75a60df"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5999),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6000),
                            Url = "5.jpg",
                            UserId = "5d160224-35b5-44da-aa43-5e80aef0e972"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6010),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6011),
                            Url = "6.jpg",
                            UserId = "21cf4c10-162f-43f9-8f7a-75796eb62cb4"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6014),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6015),
                            Url = "7.jpg",
                            UserId = "d89001b9-dcd1-45e3-a98c-6bec5c05b3e3"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6017),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6018),
                            Url = "8.jpg",
                            UserId = "259f82c1-b0af-493b-857b-16ba7d273f7b"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6021),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6021),
                            Url = "9.jpg",
                            UserId = "b8e3dacd-30b8-46ea-90b3-1412459ec7f5"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6025),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6026),
                            Url = "10.jpg",
                            UserId = "38346e1e-9715-4ecf-abc0-cb4a55511594"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6028),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6029),
                            Url = "11.jpg",
                            UserId = "63c318f9-4d11-4bd0-bb0b-9f322b0a64b5"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6031),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6032),
                            Url = "12.jpg",
                            UserId = "0c7d89a7-a1df-44f0-a021-a142bd2dbfa4"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6034),
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(6035),
                            Url = "13.jpg",
                            UserId = "40c67e4f-af51-4e89-87f7-5cdfaab0fe2c"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5227),
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5231)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5236),
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5244)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5258),
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5259)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5261),
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5262)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5264),
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5266)
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5270),
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5271)
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5273),
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5274)
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5276),
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5276)
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5278),
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5280)
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5285),
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5285)
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5288),
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları",
                            UpdatedTime = new DateTime(2023, 4, 19, 17, 19, 11, 324, DateTimeKind.Local).AddTicks(5289)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0c566017-e3dc-4aca-8d38-742d962f503a",
                            RoleId = "0bf85f80-8aa1-4284-82db-6bdd536a2e86"
                        },
                        new
                        {
                            UserId = "db371fc7-33ca-4a38-b8cf-959905d73b34",
                            RoleId = "a418e4a1-7041-4037-88f0-0f12019fdb66"
                        },
                        new
                        {
                            UserId = "cf880548-9deb-46d6-9004-216654ddd651",
                            RoleId = "a418e4a1-7041-4037-88f0-0f12019fdb66"
                        },
                        new
                        {
                            UserId = "3fd9d087-584a-4d0e-8dc5-9576b75a60df",
                            RoleId = "a418e4a1-7041-4037-88f0-0f12019fdb66"
                        },
                        new
                        {
                            UserId = "5d160224-35b5-44da-aa43-5e80aef0e972",
                            RoleId = "a418e4a1-7041-4037-88f0-0f12019fdb66"
                        },
                        new
                        {
                            UserId = "21cf4c10-162f-43f9-8f7a-75796eb62cb4",
                            RoleId = "a418e4a1-7041-4037-88f0-0f12019fdb66"
                        },
                        new
                        {
                            UserId = "d89001b9-dcd1-45e3-a98c-6bec5c05b3e3",
                            RoleId = "a418e4a1-7041-4037-88f0-0f12019fdb66"
                        },
                        new
                        {
                            UserId = "259f82c1-b0af-493b-857b-16ba7d273f7b",
                            RoleId = "a418e4a1-7041-4037-88f0-0f12019fdb66"
                        },
                        new
                        {
                            UserId = "b8e3dacd-30b8-46ea-90b3-1412459ec7f5",
                            RoleId = "6ad5acb5-2df8-4e44-81fb-6069c19ff853"
                        },
                        new
                        {
                            UserId = "38346e1e-9715-4ecf-abc0-cb4a55511594",
                            RoleId = "6ad5acb5-2df8-4e44-81fb-6069c19ff853"
                        },
                        new
                        {
                            UserId = "63c318f9-4d11-4bd0-bb0b-9f322b0a64b5",
                            RoleId = "6ad5acb5-2df8-4e44-81fb-6069c19ff853"
                        },
                        new
                        {
                            UserId = "0c7d89a7-a1df-44f0-a021-a142bd2dbfa4",
                            RoleId = "6ad5acb5-2df8-4e44-81fb-6069c19ff853"
                        },
                        new
                        {
                            UserId = "40c67e4f-af51-4e89-87f7-5cdfaab0fe2c",
                            RoleId = "6ad5acb5-2df8-4e44-81fb-6069c19ff853"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Specializations")
                        .HasForeignKey("ConsultantId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
