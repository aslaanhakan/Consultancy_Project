// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    [Migration("20230516004252_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppointmentTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateOnly(2023, 1, 1),
                            AppointmentState = 1,
                            AppointmentTime = "10:00-11:00",
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2775),
                            CustomerId = 1,
                            Price = 200m,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2777)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateOnly(2023, 1, 1),
                            AppointmentState = 2,
                            AppointmentTime = "13:00-14:00",
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2793),
                            CustomerId = 2,
                            Price = 200m,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2794)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateOnly(2023, 5, 20),
                            AppointmentState = 0,
                            AppointmentTime = "15:00-16:00",
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2800),
                            CustomerId = 3,
                            Price = 150m,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2804)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateOnly(2023, 5, 25),
                            AppointmentState = 3,
                            AppointmentTime = "18:00-19:00",
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2809),
                            CustomerId = 4,
                            Price = 150m,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2810)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Available", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkingHoursId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("WorkingHoursId");

                    b.ToTable("Availables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2617),
                            Date = new DateOnly(2023, 5, 15),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2621),
                            WorkingHoursId = 15
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2630),
                            Date = new DateOnly(2023, 5, 16),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2633),
                            WorkingHoursId = 20
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2638),
                            Date = new DateOnly(2023, 5, 17),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2639),
                            WorkingHoursId = 16
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2645),
                            Date = new DateOnly(2023, 5, 22),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2648),
                            WorkingHoursId = 13
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2653),
                            Date = new DateOnly(2023, 5, 22),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2654),
                            WorkingHoursId = 14
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2664),
                            Date = new DateOnly(2023, 5, 22),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2667),
                            WorkingHoursId = 15
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3518),
                            Institution = "Amerikan Psikoloji Derneği",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3522)
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3530),
                            Institution = "Amerikan Psikoloji Derneği (APA)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3534)
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3538),
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3539)
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3541),
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3544)
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3549),
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3552)
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3557),
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3561)
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3567),
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3568)
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3571),
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3573)
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3578),
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3581)
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3586),
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3589)
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3598),
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3599)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "<p>Elif Tuncel, lisans eğitimini Boğazi&ccedil;i &Uuml;niversitesi Psikoloji b&ouml;l&uuml;m&uuml;nde tamamlamıştır. Aynı &uuml;niversitede Klinik Psikoloji Y&uuml;ksek Lisans programını tamamlayarak Uzman Klinik Psikolog unvanını almıştır. Doktora programına devam etmektedir.</p>",
                            UserId = "633c517c-d461-4627-b3a0-179c65f6626f",
                            VisitsPrice = 250m
                        },
                        new
                        {
                            Id = 2,
                            Confirmation = true,
                            JobTitle = "Klinik Psikolog",
                            Promotion = "<p>Elif Tuncel, lisans eğitimini Boğazi&ccedil;i &Uuml;niversitesi Psikoloji b&ouml;l&uuml;m&uuml;nde tamamlamıştır. Aynı &uuml;niversitede Klinik Psikoloji Y&uuml;ksek Lisans programını tamamlayarak Uzman Klinik Psikolog unvanını almıştır. Doktora programına devam etmektedir.</p>",
                            UserId = "1d9038fa-5093-4d1d-bd35-054c55a60199",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            Confirmation = true,
                            JobTitle = "Psikolog",
                            Promotion = "<p>Elif Tuncel, lisans eğitimini Boğazi&ccedil;i &Uuml;niversitesi Psikoloji b&ouml;l&uuml;m&uuml;nde tamamlamıştır. Aynı &uuml;niversitede Klinik Psikoloji Y&uuml;ksek Lisans programını tamamlayarak Uzman Klinik Psikolog unvanını almıştır. Doktora programına devam etmektedir.</p>",
                            UserId = "fd9f764a-cc69-48c0-a20f-268305752050",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "<p>Elif Tuncel, lisans eğitimini Boğazi&ccedil;i &Uuml;niversitesi Psikoloji b&ouml;l&uuml;m&uuml;nde tamamlamıştır. Aynı &uuml;niversitede Klinik Psikoloji Y&uuml;ksek Lisans programını tamamlayarak Uzman Klinik Psikolog unvanını almıştır. Doktora programına devam etmektedir.</p>",
                            UserId = "8a4de71a-ab39-413f-82ba-7877977d2ffc",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "<p>Elif Tuncel, lisans eğitimini Boğazi&ccedil;i &Uuml;niversitesi Psikoloji b&ouml;l&uuml;m&uuml;nde tamamlamıştır. Aynı &uuml;niversitede Klinik Psikoloji Y&uuml;ksek Lisans programını tamamlayarak Uzman Klinik Psikolog unvanını almıştır. Doktora programına devam etmektedir.</p>",
                            UserId = "422e96a8-1d24-495e-9610-4241e794ca6d",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "<p>Elif Tuncel, lisans eğitimini Boğazi&ccedil;i &Uuml;niversitesi Psikoloji b&ouml;l&uuml;m&uuml;nde tamamlamıştır. Aynı &uuml;niversitede Klinik Psikoloji Y&uuml;ksek Lisans programını tamamlayarak Uzman Klinik Psikolog unvanını almıştır. Doktora programına devam etmektedir.</p>",
                            UserId = "c2cbe566-1db4-4a5b-ada3-813e74ee2a38",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "<p>Elif Tuncel, lisans eğitimini Boğazi&ccedil;i &Uuml;niversitesi Psikoloji b&ouml;l&uuml;m&uuml;nde tamamlamıştır. Aynı &uuml;niversitede Klinik Psikoloji Y&uuml;ksek Lisans programını tamamlayarak Uzman Klinik Psikolog unvanını almıştır. Doktora programına devam etmektedir.</p>",
                            UserId = "ac1e2980-0bad-4e1e-9996-8311297248b7",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "8d0a5564-0390-4355-8534-9204be00a418"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "ab0b4c71-84fd-4d50-bd32-26a7ebef9ef9"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "700cc93a-e0dc-43f9-8bec-25d101f1aa07"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "7e2035bc-412f-4d3e-aea5-e7ff5a406c1e"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "681b7b2d-0b42-424c-8871-61efaf4385bb"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2908),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2912)
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2922),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2923)
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2928),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2929)
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2934),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2935)
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2942),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2943)
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2952),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2956)
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2958),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2959)
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2965),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2967)
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2972),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2973)
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2985),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2986)
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2988),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2991)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ae3523aa-4848-46d9-92ee-a061b2e1bb82",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a888d4f6-beb3-4775-9574-7833a3e5c4b1",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "71ac5a8c-0d2f-41a3-949a-14793245a769",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ea14b91f-073e-41bd-b55b-9eb9b1471ac2",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "884d7054-1f91-477a-9edb-fcf2a5568cf8",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(654),
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAT8FXQ32yLl/4zYvfNLamnpWmPCoMORtoiZqFo6mYdDjHPRhgQNvKMDeReAeQD/9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6785924-b7d5-47ef-90cb-1d5e1ba53e86",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(668),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "633c517c-d461-4627-b3a0-179c65f6626f",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "a2b6238b-db31-4b40-9080-78a420cc7c78",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(724),
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJFVN0L3dqUh1O5LNUutSGMBGDvD0/46erLJFoMyTugdUfxs+kRqFwR5HMmqSWhTHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a784288f-34cf-43f2-853c-4d15a79d53ed",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(729),
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "1d9038fa-5093-4d1d-bd35-054c55a60199",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "5758d5a0-0c2c-4ef8-a00a-f45cf1502099",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(767),
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDblT86kxc5y9CAohvYcEKHuICx7EeWhWfGnvWach6CEx2un31dcRG6Qge/InJEawA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5f3348d-764a-4db5-b9e6-2b9a35b26919",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(770),
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "fd9f764a-cc69-48c0-a20f-268305752050",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "87eccdbd-49fa-486f-8aab-a763df19f681",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(884),
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAEKP1pJHQx+8HyFV6NDfnjYDbU2iF2lgIsdQJTbE+Se/PYOLN/SBbDFJtgCBlD1cWBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5932a4f-8524-46fa-b3f7-cbae411e92eb",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(886),
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "8a4de71a-ab39-413f-82ba-7877977d2ffc",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "bbdb2921-f739-468c-a740-5278967661e4",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(908),
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEI9mfOEmO/37CU2wHuNAaAg07mZ0xNj6uQdKOh0WD0JDXe5vfiph8YYYR0L2Ng9qcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f33a8585-efeb-43a0-8452-950ad66a70c3",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(909),
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "422e96a8-1d24-495e-9610-4241e794ca6d",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "35b6113a-81eb-4c76-9ba9-a831e046fe39",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(932),
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPapm7BfhpWPbyl0s6eL0/epiUgjKCrhmbMyseXrz9plygodXMKpQTV+p3cUgMBc1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b433d09-d65c-4a92-b4f8-c8e09b895edb",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(936),
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "c2cbe566-1db4-4a5b-ada3-813e74ee2a38",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "ff222348-6e31-4c17-84cb-21f8a6abc1ad",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(961),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAvQthxFjBwDqqAc+yz8BOZcHBY//h6zkzMIH7ibZfKtaFGWV0oLJq1OwwnRnYZQgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbbda6de-43e8-48ee-94a5-1912a0fe4fec",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(962),
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "ac1e2980-0bad-4e1e-9996-8311297248b7",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "379cd207-b213-4331-a0c1-c89f1b69ee80",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(989),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEF6kS25CrxHaXyvozSoIlUPejYJ2n5FscpmDvOaL9AjkUQzBTrLQBe3rZDU4h6aVyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f68d424-6874-4d6c-8d7e-1f3ccb5ccbce",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(993),
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "8d0a5564-0390-4355-8534-9204be00a418",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "2215bb38-a980-4699-b475-e59db2726243",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1009),
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGwBSiSQXUpsIGrg9wZHPlo0Z9OU0kd8zqBRfkzLMlqg6JdeVSWazXbw82NsLo6Sdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81ec875b-eb60-4bbd-8f32-bc5c6adfa3aa",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1010),
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "ab0b4c71-84fd-4d50-bd32-26a7ebef9ef9",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "d57c0ebb-068a-42a6-bb5d-bbc3589b5f63",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1062),
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEFeyAU0t89jd/Iso0RVkxOC7jT4WUNwWorMYys3Tp7YDzuiuw9HQ6w7Ikic0hghsZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7458011-ab2a-40e7-a79e-dde59bc89f74",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1067),
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "700cc93a-e0dc-43f9-8bec-25d101f1aa07",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "be888c2f-45f6-474e-96a4-f0263a5de38a",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1103),
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECBXVVsiitH6sWRfT6c537F2xd7lPJlM80zOCgiy3J7Y+LiMGUEfRHQSAwNb23X6yg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "696835b1-cc85-43d0-8147-d4035913b441",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1107),
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "7e2035bc-412f-4d3e-aea5-e7ff5a406c1e",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "dd4b823c-5749-47b6-beed-6367c6348417",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1146),
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAELWA9kYzJYj8A6kPPiWq+Sh3yvqINYyadubJi/y/kQysGoADID7+TOotp2sjIrX3QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14ffd567-54a9-41ff-b06f-d59cbddf68f9",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1150),
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "681b7b2d-0b42-424c-8871-61efaf4385bb",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "2b2c1429-e4d9-49b0-b670-958f5104bc70",
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1189),
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOcYoPWqM6FSQKi+f4PFRCgR7BDnSSgfVfOQCc09AHZOqwLZ0E9bRScBDRRxAWG/Og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71815372-ffac-4ed7-9827-8ebb447d7da2",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1193),
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3926),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3930),
                            Url = "1.jpg",
                            UserId = "ea14b91f-073e-41bd-b55b-9eb9b1471ac2"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3946),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3947),
                            Url = "2.jpg",
                            UserId = "633c517c-d461-4627-b3a0-179c65f6626f"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3951),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3952),
                            Url = "3.jpg",
                            UserId = "1d9038fa-5093-4d1d-bd35-054c55a60199"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3954),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3955),
                            Url = "4.jpg",
                            UserId = "fd9f764a-cc69-48c0-a20f-268305752050"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3958),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3958),
                            Url = "5.jpg",
                            UserId = "8a4de71a-ab39-413f-82ba-7877977d2ffc"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3969),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3970),
                            Url = "6.jpg",
                            UserId = "422e96a8-1d24-495e-9610-4241e794ca6d"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3973),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3974),
                            Url = "7.jpg",
                            UserId = "c2cbe566-1db4-4a5b-ada3-813e74ee2a38"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3978),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3980),
                            Url = "8.jpg",
                            UserId = "ac1e2980-0bad-4e1e-9996-8311297248b7"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3984),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3986),
                            Url = "9.jpg",
                            UserId = "8d0a5564-0390-4355-8534-9204be00a418"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3997),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(3997),
                            Url = "10.jpg",
                            UserId = "ab0b4c71-84fd-4d50-bd32-26a7ebef9ef9"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(4003),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(4004),
                            Url = "11.jpg",
                            UserId = "700cc93a-e0dc-43f9-8bec-25d101f1aa07"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(4007),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(4008),
                            Url = "12.jpg",
                            UserId = "7e2035bc-412f-4d3e-aea5-e7ff5a406c1e"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(4010),
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(4011),
                            Url = "13.jpg",
                            UserId = "681b7b2d-0b42-424c-8871-61efaf4385bb"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1988),
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(1993)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2002),
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2148)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2167),
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2170)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2175),
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2177)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2179),
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2180)
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2190),
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2193)
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2195),
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2196)
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2200),
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2202)
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2207),
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2209)
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2215),
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2219)
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2223),
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları",
                            UpdatedTime = new DateTime(2023, 5, 16, 3, 42, 50, 449, DateTimeKind.Local).AddTicks(2224)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hour")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkingHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hour = "00:00-01:00"
                        },
                        new
                        {
                            Id = 2,
                            Hour = "01:00-02:00"
                        },
                        new
                        {
                            Id = 3,
                            Hour = "02:00-03:00"
                        },
                        new
                        {
                            Id = 4,
                            Hour = "03:00-04:00"
                        },
                        new
                        {
                            Id = 5,
                            Hour = "04:00-05:00"
                        },
                        new
                        {
                            Id = 6,
                            Hour = "05:00-06:00"
                        },
                        new
                        {
                            Id = 7,
                            Hour = "06:00-07:00"
                        },
                        new
                        {
                            Id = 8,
                            Hour = "07:00-08:00"
                        },
                        new
                        {
                            Id = 9,
                            Hour = "08:00-09:00"
                        },
                        new
                        {
                            Id = 10,
                            Hour = "09:00-10:00"
                        },
                        new
                        {
                            Id = 11,
                            Hour = "10:00-11:00"
                        },
                        new
                        {
                            Id = 12,
                            Hour = "11:00-12:00"
                        },
                        new
                        {
                            Id = 13,
                            Hour = "12:00-13:00"
                        },
                        new
                        {
                            Id = 14,
                            Hour = "13:00-14:00"
                        },
                        new
                        {
                            Id = 15,
                            Hour = "14:00-15:00"
                        },
                        new
                        {
                            Id = 16,
                            Hour = "15:00-16:00"
                        },
                        new
                        {
                            Id = 17,
                            Hour = "16:00-17:00"
                        },
                        new
                        {
                            Id = 18,
                            Hour = "17:00-18:00"
                        },
                        new
                        {
                            Id = 19,
                            Hour = "18:00-19:00"
                        },
                        new
                        {
                            Id = 20,
                            Hour = "19:00-20:00"
                        },
                        new
                        {
                            Id = 21,
                            Hour = "20:00-21:00"
                        },
                        new
                        {
                            Id = 22,
                            Hour = "21:00-22:00"
                        },
                        new
                        {
                            Id = 23,
                            Hour = "22:00-23:00"
                        },
                        new
                        {
                            Id = 24,
                            Hour = "23:00-00:00"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ea14b91f-073e-41bd-b55b-9eb9b1471ac2",
                            RoleId = "ae3523aa-4848-46d9-92ee-a061b2e1bb82"
                        },
                        new
                        {
                            UserId = "633c517c-d461-4627-b3a0-179c65f6626f",
                            RoleId = "71ac5a8c-0d2f-41a3-949a-14793245a769"
                        },
                        new
                        {
                            UserId = "1d9038fa-5093-4d1d-bd35-054c55a60199",
                            RoleId = "71ac5a8c-0d2f-41a3-949a-14793245a769"
                        },
                        new
                        {
                            UserId = "fd9f764a-cc69-48c0-a20f-268305752050",
                            RoleId = "71ac5a8c-0d2f-41a3-949a-14793245a769"
                        },
                        new
                        {
                            UserId = "8a4de71a-ab39-413f-82ba-7877977d2ffc",
                            RoleId = "71ac5a8c-0d2f-41a3-949a-14793245a769"
                        },
                        new
                        {
                            UserId = "422e96a8-1d24-495e-9610-4241e794ca6d",
                            RoleId = "71ac5a8c-0d2f-41a3-949a-14793245a769"
                        },
                        new
                        {
                            UserId = "c2cbe566-1db4-4a5b-ada3-813e74ee2a38",
                            RoleId = "71ac5a8c-0d2f-41a3-949a-14793245a769"
                        },
                        new
                        {
                            UserId = "ac1e2980-0bad-4e1e-9996-8311297248b7",
                            RoleId = "71ac5a8c-0d2f-41a3-949a-14793245a769"
                        },
                        new
                        {
                            UserId = "8d0a5564-0390-4355-8534-9204be00a418",
                            RoleId = "a888d4f6-beb3-4775-9574-7833a3e5c4b1"
                        },
                        new
                        {
                            UserId = "ab0b4c71-84fd-4d50-bd32-26a7ebef9ef9",
                            RoleId = "a888d4f6-beb3-4775-9574-7833a3e5c4b1"
                        },
                        new
                        {
                            UserId = "700cc93a-e0dc-43f9-8bec-25d101f1aa07",
                            RoleId = "a888d4f6-beb3-4775-9574-7833a3e5c4b1"
                        },
                        new
                        {
                            UserId = "7e2035bc-412f-4d3e-aea5-e7ff5a406c1e",
                            RoleId = "a888d4f6-beb3-4775-9574-7833a3e5c4b1"
                        },
                        new
                        {
                            UserId = "681b7b2d-0b42-424c-8871-61efaf4385bb",
                            RoleId = "a888d4f6-beb3-4775-9574-7833a3e5c4b1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Appointment")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("Appointment")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Available", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Availables")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.WorkingHours", "WorkingHours")
                        .WithMany()
                        .HasForeignKey("WorkingHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("Availables");

                    b.Navigation("Certificates");

                    b.Navigation("ConsultantsSpecializations");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Navigation("ConsultantsSpecializations");
                });
#pragma warning restore 612, 618
        }
    }
}
