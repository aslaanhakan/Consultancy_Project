// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    partial class ConsultancyProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppointmentTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId")
                        .IsUnique();

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateOnly(2023, 1, 1),
                            AppointmentState = 1,
                            AppointmentTime = "10:00-11:00",
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4791),
                            CustomerId = 1,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4792)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateOnly(2023, 1, 1),
                            AppointmentState = 2,
                            AppointmentTime = "13:00-14:00",
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4798),
                            CustomerId = 2,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4799)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateOnly(2023, 5, 20),
                            AppointmentState = 0,
                            AppointmentTime = "15:00-16:00",
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4802),
                            CustomerId = 3,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4803)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateOnly(2023, 5, 25),
                            AppointmentState = 3,
                            AppointmentTime = "18:00-19:00",
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4806),
                            CustomerId = 4,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4807)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5030),
                            Institution = "Amerikan Psikoloji Derneği",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5031)
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5036),
                            Institution = "Amerikan Psikoloji Derneği (APA)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5037)
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5039),
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5040)
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5041),
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5042)
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5044),
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5045)
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5048),
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5049)
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5051),
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5052)
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5053),
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5054)
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5057),
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5058)
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5061),
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5062)
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5064),
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5065)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UserId = "5bef4dc4-18bd-476c-a40d-34cc43825716",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 2,
                            Confirmation = true,
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UserId = "4837edea-c694-4273-8f9a-2bbc98ff9396",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            Confirmation = true,
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UserId = "594f7db0-f7b2-45a0-be4c-081876555572",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UserId = "1c036192-5499-40ea-80b0-4c1c0920889b",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UserId = "ffc0e2c7-0d42-4a4e-86db-535968ae85db",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UserId = "04d30f2e-caec-404f-b505-70fb1196a025",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UserId = "33690bb7-9a39-462d-8e6d-286f1ec548cb",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "f8931c0e-4b89-4d8b-b34e-a082a5ff49e1"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "4e90ec0e-8076-4c59-80af-3ad19f0cc829"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "942ccabe-e292-4f30-86c9-de496389a002"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "bb5b1305-b7bd-43bc-8134-a79891fe3d30"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "1042ba8d-2316-49d4-94a3-1f5e1e852f2b"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4853),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4855)
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4860),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4860)
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4863),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4864)
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4866),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4867)
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4869),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4870)
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4874),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4874)
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4877),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4878)
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4880),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4881)
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4883),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4884)
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4888),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4889)
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4891),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4892)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1c5fee95-1ff4-4c03-9fd6-190c28f89d9d",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "119df383-e36b-484e-b3f3-11ec5da34dd6",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "cf071a51-eaef-4d9a-bbce-7f9bca26bfb3",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fb68072b-4beb-4b89-9cc9-0ae9f82746fa",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "a5e34ea5-c919-485d-8878-660819b95949",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3843),
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBjrRH6tXRDSyGM69CS/dTplPwTClC7NTGeMk9L8s2p/0U+vkX2paQ0OMAX86gq5Pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccefdc35-d746-41f2-af4f-c4adbb7c2041",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3859),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5bef4dc4-18bd-476c-a40d-34cc43825716",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "c6edba63-f509-427b-b4f5-d3346559c0b1",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3904),
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEH/bCqJy2E4MKpWlZDOOEpA/UcqbNZfXgVXiGGaVr/yatsK/3KbKx0bQyjxngoxi0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6065c39-1051-459c-a781-a3611ee1ec2f",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3905),
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "4837edea-c694-4273-8f9a-2bbc98ff9396",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "c7a02acd-998f-45e5-bc5a-05bd15a8aba7",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3920),
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJJ1kdwLbnlVeoI35DQbHWC8Qk7+I2o5GEBV9wqO+n3C+4eOPOdBiar23lODOK5DRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f163d3ca-7531-4280-b328-acec4fffea6c",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3921),
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "594f7db0-f7b2-45a0-be4c-081876555572",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "d56d9d4d-69dd-45f2-a7c0-5af60bbb131d",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3938),
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAEGGFBriUlMh7YRiGCqeevWY7aHdNDIV6eK1qYux2c3qhAjmpwRKimAYeuObtbnpzaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5aedde3e-27a4-458a-87f3-e8944e2ff60e",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3939),
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "1c036192-5499-40ea-80b0-4c1c0920889b",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "21ffd54a-5aae-4c05-9fb0-18cb7d8431c0",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3954),
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEEuYlml0nIkIz8PSqd+IN4864KdfiijT4oOw/q3UpDiWGGS0IaeNmj5eZgeXWPEdjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7fd6a5a-4de0-4f55-b790-9a00a3375882",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3955),
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "ffc0e2c7-0d42-4a4e-86db-535968ae85db",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "c67bb667-c146-427e-885f-d9eb09133aac",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3972),
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHK28L+5W/Yh3i3JMttqfz1Wijon/Uk0gNxcMbkv35sRLj+3wc+zzZA5OdLxmYWNPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f57e3c2-4b38-4f6b-a024-8a4b96dd044b",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3973),
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "04d30f2e-caec-404f-b505-70fb1196a025",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "9929709f-429c-4ae2-9347-04cf2250cd5a",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3990),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAECtyFj/rr4UKxWVhbGOJuHF/TDqNPhjjsMfNrPRKEq6t0B4xeUayyITRKmbw6AI6Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61789081-acb9-4e6f-9d1f-0bc367286e81",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(3990),
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "33690bb7-9a39-462d-8e6d-286f1ec548cb",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "4919119b-1f47-4a23-9495-688878b6aa15",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4003),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAED2qZTFwhO7XWrLJt+fleNnx7FuqCqt1tMTtrTXYuV0t83/Rt50xIsN+9PlFdrC01A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b822704-4e0a-4a46-aa64-0e1782487d93",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4003),
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "f8931c0e-4b89-4d8b-b34e-a082a5ff49e1",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "2fa7fad1-4940-4414-9a2d-84cb2fbddffe",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4016),
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKtxMsYNvDi8tobv/2ckyIDpMeZa7S9jx9PDuXPIquChOnrxKlT6iN1xV2aZjqEktg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64c95b9a-7498-48c9-bd64-12d99fc0577e",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4017),
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "4e90ec0e-8076-4c59-80af-3ad19f0cc829",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "f434c9ac-20ea-4ae4-8af4-f0e50c36431e",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4052),
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEKt7c/9kbiWwHR8Ke0PtCgJES7u35iGqKr1LFdMz9jZQO8Qj/GGq89Q18pD6tiNaeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "631c7a9f-aa90-4f3e-b8f3-c29cbb88d72e",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4053),
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "942ccabe-e292-4f30-86c9-de496389a002",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "7dfa22f3-a0a3-4edd-a23e-21505f03101c",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4075),
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECMiXVeJxswNQrLjtjMyvL0DTZJQNfaY5Lx4aGVjB0dYoQf9XN7MAdAwfSK25hRkrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b1855c3-9800-42d8-a46f-2ec3100794fa",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4076),
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "bb5b1305-b7bd-43bc-8134-a79891fe3d30",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "a0ac990d-3fa5-42a6-a476-7b68d7e67f2d",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4092),
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAEBMGPM3bvw54+JX5gW3RFJB3xMIPUeKtzbuzWUxZX4MeHoqQ2IODDcZMMcJNOVFjJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4e01a4d-5b2c-4035-84e9-bd77bd7c860b",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4093),
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "1042ba8d-2316-49d4-94a3-1f5e1e852f2b",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "493cf4a1-7937-45fe-a852-d9292207e273",
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4105),
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEP0nWsX/mB04LiMJd5+066kdRhaVn2LR0ht0yP+AheVom9LMFQQTkYam/8xpHG3LZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf321aa5-1cf0-418d-9464-a1b1cc53d4c9",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4106),
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5191),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5193),
                            Url = "1.jpg",
                            UserId = "fb68072b-4beb-4b89-9cc9-0ae9f82746fa"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5198),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5199),
                            Url = "2.jpg",
                            UserId = "5bef4dc4-18bd-476c-a40d-34cc43825716"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5201),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5202),
                            Url = "3.jpg",
                            UserId = "4837edea-c694-4273-8f9a-2bbc98ff9396"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5204),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5205),
                            Url = "4.jpg",
                            UserId = "594f7db0-f7b2-45a0-be4c-081876555572"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5207),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5208),
                            Url = "5.jpg",
                            UserId = "1c036192-5499-40ea-80b0-4c1c0920889b"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5217),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5218),
                            Url = "6.jpg",
                            UserId = "ffc0e2c7-0d42-4a4e-86db-535968ae85db"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5220),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5221),
                            Url = "7.jpg",
                            UserId = "04d30f2e-caec-404f-b505-70fb1196a025"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5223),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5224),
                            Url = "8.jpg",
                            UserId = "33690bb7-9a39-462d-8e6d-286f1ec548cb"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5226),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5226),
                            Url = "9.jpg",
                            UserId = "f8931c0e-4b89-4d8b-b34e-a082a5ff49e1"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5230),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5230),
                            Url = "10.jpg",
                            UserId = "4e90ec0e-8076-4c59-80af-3ad19f0cc829"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5233),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5233),
                            Url = "11.jpg",
                            UserId = "942ccabe-e292-4f30-86c9-de496389a002"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5235),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5236),
                            Url = "12.jpg",
                            UserId = "bb5b1305-b7bd-43bc-8134-a79891fe3d30"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5335),
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(5336),
                            Url = "13.jpg",
                            UserId = "1042ba8d-2316-49d4-94a3-1f5e1e852f2b"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4583),
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4586)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4591),
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4596)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4610),
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4611)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4613),
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4613)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4615),
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4616)
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4622),
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4623)
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4624),
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4625)
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4626),
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4627)
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4629),
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4629)
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4633),
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4633)
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4635),
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları",
                            UpdatedTime = new DateTime(2023, 5, 9, 16, 15, 37, 866, DateTimeKind.Local).AddTicks(4636)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fb68072b-4beb-4b89-9cc9-0ae9f82746fa",
                            RoleId = "1c5fee95-1ff4-4c03-9fd6-190c28f89d9d"
                        },
                        new
                        {
                            UserId = "5bef4dc4-18bd-476c-a40d-34cc43825716",
                            RoleId = "cf071a51-eaef-4d9a-bbce-7f9bca26bfb3"
                        },
                        new
                        {
                            UserId = "4837edea-c694-4273-8f9a-2bbc98ff9396",
                            RoleId = "cf071a51-eaef-4d9a-bbce-7f9bca26bfb3"
                        },
                        new
                        {
                            UserId = "594f7db0-f7b2-45a0-be4c-081876555572",
                            RoleId = "cf071a51-eaef-4d9a-bbce-7f9bca26bfb3"
                        },
                        new
                        {
                            UserId = "1c036192-5499-40ea-80b0-4c1c0920889b",
                            RoleId = "cf071a51-eaef-4d9a-bbce-7f9bca26bfb3"
                        },
                        new
                        {
                            UserId = "ffc0e2c7-0d42-4a4e-86db-535968ae85db",
                            RoleId = "cf071a51-eaef-4d9a-bbce-7f9bca26bfb3"
                        },
                        new
                        {
                            UserId = "04d30f2e-caec-404f-b505-70fb1196a025",
                            RoleId = "cf071a51-eaef-4d9a-bbce-7f9bca26bfb3"
                        },
                        new
                        {
                            UserId = "33690bb7-9a39-462d-8e6d-286f1ec548cb",
                            RoleId = "cf071a51-eaef-4d9a-bbce-7f9bca26bfb3"
                        },
                        new
                        {
                            UserId = "f8931c0e-4b89-4d8b-b34e-a082a5ff49e1",
                            RoleId = "119df383-e36b-484e-b3f3-11ec5da34dd6"
                        },
                        new
                        {
                            UserId = "4e90ec0e-8076-4c59-80af-3ad19f0cc829",
                            RoleId = "119df383-e36b-484e-b3f3-11ec5da34dd6"
                        },
                        new
                        {
                            UserId = "942ccabe-e292-4f30-86c9-de496389a002",
                            RoleId = "119df383-e36b-484e-b3f3-11ec5da34dd6"
                        },
                        new
                        {
                            UserId = "bb5b1305-b7bd-43bc-8134-a79891fe3d30",
                            RoleId = "119df383-e36b-484e-b3f3-11ec5da34dd6"
                        },
                        new
                        {
                            UserId = "1042ba8d-2316-49d4-94a3-1f5e1e852f2b",
                            RoleId = "119df383-e36b-484e-b3f3-11ec5da34dd6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithOne("Appointment")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Appointment", "ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithOne("Appointment")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Appointment", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("Certificates");

                    b.Navigation("ConsultantsSpecializations");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Navigation("ConsultantsSpecializations");
                });
#pragma warning restore 612, 618
        }
    }
}
