// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    partial class ConsultancyProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(128),
                            Institution = "Amerikan Psikoloji Derneği",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(130)
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(134),
                            Institution = "Amerikan Psikoloji Derneği (APA)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(135)
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(137),
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(137)
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(198),
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(199)
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(201),
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(201)
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(206),
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(206)
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(210),
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(210)
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(212),
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(213)
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(215),
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(215)
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(219),
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(220)
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(222),
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(222)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UserId = "a06a802f-75d2-43e3-bd20-c0f7e4bece63",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 2,
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UserId = "aed1901a-a771-4d58-b361-66abf4458e1d",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UserId = "44180815-7620-476f-a4d2-1659b840c14f",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UserId = "ed879df0-576c-4223-86b8-ab542ec21858",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UserId = "987ea5c3-c11e-43f5-a263-e38be560425e",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UserId = "5fbe203c-e93a-4090-bb00-9515d8d5a4b8",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UserId = "5f382ac2-9935-4b4e-b6c4-5429069869aa",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "299044fb-191d-4c72-a529-92e2b513730c"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "4af08614-6b74-49ad-899d-35691452cab4"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "2d312aea-02f1-46be-8734-ba98b98a3331"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "8c99b3cb-b89a-4e02-ae81-9153682ea88e"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "213f5bf5-06e9-4be5-ab0a-61feb5350a5c"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(2),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(3)
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(8),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(9)
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(11),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(12)
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(14),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(15)
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(17),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(18)
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(21),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(22)
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(24),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(25)
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(28),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(28)
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(31),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(31)
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(35),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(36)
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(38),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(39)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "466ca290-6760-4ca8-a512-47b62e5ac2f6",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ab4f1221-f5ec-4aaf-8855-ec3837b7ed5e",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "c689d395-7fcd-437d-98fd-246dca4f0965",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "69e298b9-82ac-48e6-a43d-ce59f8cb7660",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "9d8028b0-7da5-4488-a978-ed266e79a3e3",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8760),
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAflXVuJPykUJ/Ffs+7OLEYeA06JNbjh1plFX8B7LfhiFJyh/mxqZeDq5DiWNtjbtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6e44f9b-df44-4c4e-8b9c-0fd6a369c6d5",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8774),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "a06a802f-75d2-43e3-bd20-c0f7e4bece63",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "7c2a5070-5479-47c4-9666-48754835107f",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8824),
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENx3Zmu4Ir4FPPAHsgfWFiSxY4+860S/aHrFqp/aCUI1jOhet9jSOuYjgXSjlx8TLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7120d208-f79d-43b9-98ba-eaacdc96e50c",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8825),
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "aed1901a-a771-4d58-b361-66abf4458e1d",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "db7683de-22b6-484f-9cfd-b9509e0abaca",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8838),
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJN9fCgenQ6MjdToZ9iMkxB//ECuL32X3bvwCgpPDUzN4CWhEIfNL1AM3JZIq/XwwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e1332d0-e605-4708-b54c-95256e4536bd",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8839),
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "44180815-7620-476f-a4d2-1659b840c14f",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "37c55c40-62f4-46dd-adce-d5b1cc09ed93",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8851),
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAEEdWen6FDXVcbcbnOWX2aTE7YjE3b7Uif5ruaJEdkzCw/zrobYOfwGmf/ecCMOb3NQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bff1f139-bf17-45ca-be5a-7e0362f1a9e8",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8852),
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "ed879df0-576c-4223-86b8-ab542ec21858",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "78a09f68-f921-4646-ae62-dfe9c25d09e9",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8867),
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEI8zDCD2fxVEbozLL7BYfnriWwQ33IldMPEeeqz8KBltnS3WZesZBVZP3bc4P24T0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b031f88a-63bd-422a-a6d7-447701ed1081",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8868),
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "987ea5c3-c11e-43f5-a263-e38be560425e",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "be16c2c3-5a33-48d8-ae5b-1167a5a2d0ba",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8883),
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEECNveaBGeaMMQSZTMi/DyDnKrt4SUzVobCVt7lvbklSEf1bjIn7s1XJpr5GDJXGxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6961edc-aafa-4f3d-ac77-c73cedfa2282",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8884),
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "5fbe203c-e93a-4090-bb00-9515d8d5a4b8",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "e24b3072-7b64-4cb9-9ab9-97a5dde3bf7d",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8899),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7B0iJ0X3HAPee8QHyIfoGryr9nznp1kLNupnTAFXxLyt2mzNJwjHDrKnSE5EwZ2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f13465c-6027-461e-9e4d-d29c7de5ab5f",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8900),
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "5f382ac2-9935-4b4e-b6c4-5429069869aa",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "d4e6b629-1b66-418a-b4a1-292a473a7854",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8911),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ2nW2dcrks3s18E8bmNCBTgmK0N+EnSMPCCQC89zC6JF9udrHjJbN/CSFm0sjXdBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cada29e0-be5a-4df4-a07a-666f57983a7e",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8912),
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "299044fb-191d-4c72-a529-92e2b513730c",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "64a9af37-4f9e-4478-95bc-89f78b71c94a",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8925),
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+OSZalucTyRexRwqxx8LXfVic4r7TIZ/oPfsTm3dn+jNwX5k76TLhQ5BX6UR5wew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe05b625-e519-4caf-894e-3e7485bde43b",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8926),
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "4af08614-6b74-49ad-899d-35691452cab4",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "56e1b6dd-b035-4625-96a6-35bfd0ee360f",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8959),
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEDU9pS3hGkOz3Ptz2hkjuZ3K6bHCQ7HCtGwXq0JC8l1u4YhbUqjK18pgW8yKttdKeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bd3eb85-6fd2-4c9f-ad0d-0342161c82bf",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8960),
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "2d312aea-02f1-46be-8734-ba98b98a3331",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "a915e120-1459-40b4-9689-50ce3664bb16",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8981),
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAJ0R+EJ522oXpGooyM8yOIHB+DygyG5UZXJ031d8mXL7R0w1li8tTMt1H0BSu3Qbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01ea7498-518f-489c-96be-96b27e554378",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8982),
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "8c99b3cb-b89a-4e02-ae81-9153682ea88e",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "e4bc10d1-278e-4d3c-b204-b2070efaaeef",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(8999),
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAENvQ7TZGYK2VhmgGTuL58nNyg3jJAU3N7GY7JFBbJIQBE5U4n2GQTHHNsem3Q4dNUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7bfa04d-aeb9-4beb-b6c3-a18c1d5d634a",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9000),
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "213f5bf5-06e9-4be5-ab0a-61feb5350a5c",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "e41041c7-bfe1-4998-af88-6cf40cea7268",
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9048),
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEEpQhnuKqOZZiK8ZO47kzAyi5maM4nn3bZns2hFdQaIEYl/NwMQqTyKRuGCUwoEQbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec5c6dfb-ddb1-45ad-b194-35e5dfe718c1",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9052),
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(349),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(351),
                            Url = "1.jpg",
                            UserId = "69e298b9-82ac-48e6-a43d-ce59f8cb7660"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(357),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(357),
                            Url = "2.jpg",
                            UserId = "a06a802f-75d2-43e3-bd20-c0f7e4bece63"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(360),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(360),
                            Url = "3.jpg",
                            UserId = "aed1901a-a771-4d58-b361-66abf4458e1d"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(362),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(363),
                            Url = "4.jpg",
                            UserId = "44180815-7620-476f-a4d2-1659b840c14f"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(365),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(367),
                            Url = "5.jpg",
                            UserId = "ed879df0-576c-4223-86b8-ab542ec21858"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(380),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(380),
                            Url = "6.jpg",
                            UserId = "987ea5c3-c11e-43f5-a263-e38be560425e"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(382),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(383),
                            Url = "7.jpg",
                            UserId = "5fbe203c-e93a-4090-bb00-9515d8d5a4b8"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(385),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(386),
                            Url = "8.jpg",
                            UserId = "5f382ac2-9935-4b4e-b6c4-5429069869aa"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(387),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(388),
                            Url = "9.jpg",
                            UserId = "299044fb-191d-4c72-a529-92e2b513730c"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(391),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(392),
                            Url = "10.jpg",
                            UserId = "4af08614-6b74-49ad-899d-35691452cab4"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(394),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(395),
                            Url = "11.jpg",
                            UserId = "2d312aea-02f1-46be-8734-ba98b98a3331"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(397),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(397),
                            Url = "12.jpg",
                            UserId = "8c99b3cb-b89a-4e02-ae81-9153682ea88e"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(399),
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 755, DateTimeKind.Local).AddTicks(400),
                            Url = "13.jpg",
                            UserId = "213f5bf5-06e9-4be5-ab0a-61feb5350a5c"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9791),
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9797)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9800),
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9804)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9823),
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9824)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9825),
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9826)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9828),
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9828)
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9832),
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9832)
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9834),
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9835)
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9836),
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9837)
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9839),
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9839)
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9842),
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9843)
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9844),
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları",
                            UpdatedTime = new DateTime(2023, 5, 1, 21, 26, 28, 754, DateTimeKind.Local).AddTicks(9845)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "69e298b9-82ac-48e6-a43d-ce59f8cb7660",
                            RoleId = "466ca290-6760-4ca8-a512-47b62e5ac2f6"
                        },
                        new
                        {
                            UserId = "a06a802f-75d2-43e3-bd20-c0f7e4bece63",
                            RoleId = "c689d395-7fcd-437d-98fd-246dca4f0965"
                        },
                        new
                        {
                            UserId = "aed1901a-a771-4d58-b361-66abf4458e1d",
                            RoleId = "c689d395-7fcd-437d-98fd-246dca4f0965"
                        },
                        new
                        {
                            UserId = "44180815-7620-476f-a4d2-1659b840c14f",
                            RoleId = "c689d395-7fcd-437d-98fd-246dca4f0965"
                        },
                        new
                        {
                            UserId = "ed879df0-576c-4223-86b8-ab542ec21858",
                            RoleId = "c689d395-7fcd-437d-98fd-246dca4f0965"
                        },
                        new
                        {
                            UserId = "987ea5c3-c11e-43f5-a263-e38be560425e",
                            RoleId = "c689d395-7fcd-437d-98fd-246dca4f0965"
                        },
                        new
                        {
                            UserId = "5fbe203c-e93a-4090-bb00-9515d8d5a4b8",
                            RoleId = "c689d395-7fcd-437d-98fd-246dca4f0965"
                        },
                        new
                        {
                            UserId = "5f382ac2-9935-4b4e-b6c4-5429069869aa",
                            RoleId = "c689d395-7fcd-437d-98fd-246dca4f0965"
                        },
                        new
                        {
                            UserId = "299044fb-191d-4c72-a529-92e2b513730c",
                            RoleId = "ab4f1221-f5ec-4aaf-8855-ec3837b7ed5e"
                        },
                        new
                        {
                            UserId = "4af08614-6b74-49ad-899d-35691452cab4",
                            RoleId = "ab4f1221-f5ec-4aaf-8855-ec3837b7ed5e"
                        },
                        new
                        {
                            UserId = "2d312aea-02f1-46be-8734-ba98b98a3331",
                            RoleId = "ab4f1221-f5ec-4aaf-8855-ec3837b7ed5e"
                        },
                        new
                        {
                            UserId = "8c99b3cb-b89a-4e02-ae81-9153682ea88e",
                            RoleId = "ab4f1221-f5ec-4aaf-8855-ec3837b7ed5e"
                        },
                        new
                        {
                            UserId = "213f5bf5-06e9-4be5-ab0a-61feb5350a5c",
                            RoleId = "ab4f1221-f5ec-4aaf-8855-ec3837b7ed5e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("ConsultantsSpecializations");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Navigation("ConsultantsSpecializations");
                });
#pragma warning restore 612, 618
        }
    }
}
