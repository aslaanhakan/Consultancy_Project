// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    partial class ConsultancyProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AppointmentState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppointmentTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateOnly(2023, 1, 1),
                            AppointmentState = 1,
                            AppointmentTime = "10:00-11:00",
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1594),
                            CustomerId = 1,
                            Price = 200m,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1595)
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateOnly(2023, 1, 1),
                            AppointmentState = 2,
                            AppointmentTime = "13:00-14:00",
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1602),
                            CustomerId = 2,
                            Price = 200m,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1603)
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateOnly(2023, 5, 20),
                            AppointmentState = 0,
                            AppointmentTime = "15:00-16:00",
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1607),
                            CustomerId = 3,
                            Price = 0m,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1608)
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateOnly(2023, 5, 25),
                            AppointmentState = 3,
                            AppointmentTime = "18:00-19:00",
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1610),
                            CustomerId = 4,
                            Price = 0m,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1611)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Available", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkingHoursId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("WorkingHoursId");

                    b.ToTable("Availables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1468),
                            Date = new DateOnly(2023, 5, 15),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1469),
                            WorkingHoursId = 15
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1475),
                            Date = new DateOnly(2023, 5, 16),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1476),
                            WorkingHoursId = 20
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1478),
                            Date = new DateOnly(2023, 5, 17),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1479),
                            WorkingHoursId = 16
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1481),
                            Date = new DateOnly(2023, 5, 22),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1482),
                            WorkingHoursId = 13
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1484),
                            Date = new DateOnly(2023, 5, 22),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1485),
                            WorkingHoursId = 14
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1489),
                            Date = new DateOnly(2023, 5, 22),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1489),
                            WorkingHoursId = 15
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1775),
                            Institution = "Amerikan Psikoloji Derneği",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1776)
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1780),
                            Institution = "Amerikan Psikoloji Derneği (APA)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1781)
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1783),
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1784)
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1786),
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1787)
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1789),
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1789)
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1793),
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1794)
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1795),
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1796)
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1798),
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1799)
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1801),
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1802)
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1805),
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1806)
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1808),
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1808)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UserId = "8a71d934-9e20-4cca-b36c-4a92479e7688",
                            VisitsPrice = 250m
                        },
                        new
                        {
                            Id = 2,
                            Confirmation = true,
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UserId = "12fbb621-20b4-46d6-a7d7-1decb47cb8d6",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            Confirmation = true,
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UserId = "d8a4ead4-ab81-48fe-b579-cee04873290e",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UserId = "8d510f94-282e-48a8-9d29-8417b1b92363",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UserId = "cc01034f-bca2-400f-b85c-6b1e10c8ea03",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UserId = "64028b84-a9f4-4402-8fb2-ebde010aa9d5",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            Confirmation = true,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UserId = "0199b3ad-9def-40f4-b963-38aa8f589b13",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "de075b3e-d5ed-4e01-924f-d512677385a7"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "3325d6fb-f0c5-4658-a263-cd9ff59f2c9f"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "53e24d2a-55f7-4c6e-9f77-97b91abd4240"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "d7eaffa1-5d36-48a1-b3ed-e3a792e9f403"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "e22c0505-5996-47c6-a11d-3a88d7fc9385"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1649),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1652)
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1656),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1657)
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1659),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1660)
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1662),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1663)
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1665),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1666)
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1670),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1670)
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1673),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1674)
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1676),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1677)
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1679),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1680)
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1683),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1684)
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1687),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1687)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c5d0125a-6b1b-44f0-b8f1-5df761b2fdad",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5764b7d0-abb9-45b5-853e-1feb1f8afd78",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "917dc531-7d54-4610-bbd8-ba19d58a3bc1",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9cc64765-4239-4c42-b17f-87990db646a2",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "cd5b7e7a-30a4-4727-9897-d2ad2cb385d8",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(647),
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFu5RrVGAGPjfAz7zu3egDOTYxnQp77xyASAsxatGgL2fmo3fT5gsBG3ToWVH5cMnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b126afed-ba18-4fa2-8666-4788048cea46",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(662),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "8a71d934-9e20-4cca-b36c-4a92479e7688",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "9add0682-4588-42c0-b5fd-ff1c509574a6",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(685),
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZIGgFUpSqlg+KW4astprrxjhY9LpyFKecp787ehvi6BciYjeg26S75nbXOXgA68g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45b09f61-6067-4acf-8c02-bd9bbe860863",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(686),
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "12fbb621-20b4-46d6-a7d7-1decb47cb8d6",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "b43963f0-0981-4a4a-96c7-baf8cdef86f3",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(703),
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMX9Ez4hmpefCuLCqYT7jZlxiVVct9idGE93CnU9LhVntazVuZNAr/Cg3L3M2mSHFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01e2bf70-e354-466d-99c9-606244547eaa",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(704),
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "d8a4ead4-ab81-48fe-b579-cee04873290e",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "ae3dfd23-9941-401c-a2dc-bf45ad23ad59",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(717),
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAELtsbSq2cQwQsBNcEGF81Vhj+yybvV/hgojKhxXlHCyT7boLdUv9m/khN8IPqmoQaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "422dd896-e6cb-4455-a97a-4bdf7ef4ae99",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(718),
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "8d510f94-282e-48a8-9d29-8417b1b92363",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "7ce3a88b-3ec6-457c-8f26-402de467cda0",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(731),
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEJzZ3g09aNhYoB7yRevMcDqQ/tGFnEicObIRglpJALIgScLAob6stY+5FoJYG7Lq3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f3184a2-f317-4aa3-aabb-a6d39272cb9d",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(732),
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "cc01034f-bca2-400f-b85c-6b1e10c8ea03",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "ab979b58-4801-4b7a-9765-5f1605bb26ab",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(749),
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHKpuVXSAN37qEQf0nmY2fcTg21OmNwYSDKlNzeK9Pu1xsPjG6bbQkNkjf2sDhZJUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48f235da-2783-4a7b-af85-db4af8ab38e3",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(750),
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "64028b84-a9f4-4402-8fb2-ebde010aa9d5",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "4895e840-b253-4631-89fa-48e6ed6dd718",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(762),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMnLoQzSRCd+yHswFiLB0LSCEZtDe3lXpTjnW9AfgOaQojkRY7W4aXnUXrv+D1mjPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a1d57e4-0c99-4805-8fb1-eef066b4495e",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(763),
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "0199b3ad-9def-40f4-b963-38aa8f589b13",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "e524ef47-4c80-4ee2-9061-cb155c197155",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(775),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNsB63xM15LVdrJS5rqjLzZZRFLZpfyQOg587GhGnSC/gmit9forSfnp6GuLNKxPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e7ae9da-8a75-4bd9-a2cf-5f743eba88a9",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(775),
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "de075b3e-d5ed-4e01-924f-d512677385a7",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "35890e79-a75c-40f0-a95b-d7ccb9b908dd",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(790),
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBhrNS1kIuhrizKyqq8mZChgOW74GR6q5ReShr61tKCWTmAG83t6MEXYScpmitrZ2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0f8e832-676f-4505-a880-16f42cec1cdc",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(791),
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "3325d6fb-f0c5-4658-a263-cd9ff59f2c9f",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "87ebdde2-dee6-43b7-a032-9bf8c6c8d1a9",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(820),
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEOzPnoUAfn7+NAU7dOHRpwvCP5nxPZP7CaFp7VD1joryaKtkg0eaWOrMYGaX3y0EWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f78056e-24e5-4a25-bb6b-da73bc8a989a",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(821),
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "53e24d2a-55f7-4c6e-9f77-97b91abd4240",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "3f339685-ae88-4707-a984-c4fa1b4737be",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(841),
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9mY+eJzESzSnHWGF2jeoiI5PCJbdpsfamDHXz/+lxNyQvESRmKd9m0NmzsCuU34Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5c80478-f493-49d6-b620-ccc816d6f7f5",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(842),
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "d7eaffa1-5d36-48a1-b3ed-e3a792e9f403",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "ae1c8fa1-ab52-4423-b13d-340e398d6d4b",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(964),
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAEOIkCInECYPimTjg2NZfkIr4izmx1EA7rtWQBJPARKdikEUHI2rYrf5kEHfrYFrC1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e0f64b7-f59e-4ea3-bcea-0f5af86056b4",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(965),
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "e22c0505-5996-47c6-a11d-3a88d7fc9385",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "c9570a0e-5fc9-4c88-8789-4c7bb4d9648b",
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(977),
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFqDzC4/1+Mma1nxJqg8J/mpm3kHOWlvTgktJeSbfrj2R//oEZwJ+xikph/BxIU+4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "933de0de-d507-43d8-9bf5-bf903fdc5b59",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(978),
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2008),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2011),
                            Url = "1.jpg",
                            UserId = "9cc64765-4239-4c42-b17f-87990db646a2"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2017),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2018),
                            Url = "2.jpg",
                            UserId = "8a71d934-9e20-4cca-b36c-4a92479e7688"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2020),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2021),
                            Url = "3.jpg",
                            UserId = "12fbb621-20b4-46d6-a7d7-1decb47cb8d6"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2023),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2024),
                            Url = "4.jpg",
                            UserId = "d8a4ead4-ab81-48fe-b579-cee04873290e"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2026),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2027),
                            Url = "5.jpg",
                            UserId = "8d510f94-282e-48a8-9d29-8417b1b92363"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2036),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2037),
                            Url = "6.jpg",
                            UserId = "cc01034f-bca2-400f-b85c-6b1e10c8ea03"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2039),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2040),
                            Url = "7.jpg",
                            UserId = "64028b84-a9f4-4402-8fb2-ebde010aa9d5"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2042),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2043),
                            Url = "8.jpg",
                            UserId = "0199b3ad-9def-40f4-b963-38aa8f589b13"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2045),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2046),
                            Url = "9.jpg",
                            UserId = "de075b3e-d5ed-4e01-924f-d512677385a7"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2049),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2050),
                            Url = "10.jpg",
                            UserId = "3325d6fb-f0c5-4658-a263-cd9ff59f2c9f"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2053),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2053),
                            Url = "11.jpg",
                            UserId = "53e24d2a-55f7-4c6e-9f77-97b91abd4240"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2056),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2057),
                            Url = "12.jpg",
                            UserId = "d7eaffa1-5d36-48a1-b3ed-e3a792e9f403"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2059),
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(2060),
                            Url = "13.jpg",
                            UserId = "e22c0505-5996-47c6-a11d-3a88d7fc9385"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1257),
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1260)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1263),
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1269)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1287),
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1287)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1289),
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1290)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1292),
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1293)
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1296),
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1297)
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1298),
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1299)
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1301),
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1301)
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1303),
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1304)
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1307),
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1307)
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1309),
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları",
                            UpdatedTime = new DateTime(2023, 5, 11, 0, 7, 2, 323, DateTimeKind.Local).AddTicks(1310)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hour")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkingHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hour = "00:00-01:00"
                        },
                        new
                        {
                            Id = 2,
                            Hour = "01:00-02:00"
                        },
                        new
                        {
                            Id = 3,
                            Hour = "02:00-03:00"
                        },
                        new
                        {
                            Id = 4,
                            Hour = "03:00-04:00"
                        },
                        new
                        {
                            Id = 5,
                            Hour = "04:00-05:00"
                        },
                        new
                        {
                            Id = 6,
                            Hour = "05:00-06:00"
                        },
                        new
                        {
                            Id = 7,
                            Hour = "06:00-07:00"
                        },
                        new
                        {
                            Id = 8,
                            Hour = "07:00-08:00"
                        },
                        new
                        {
                            Id = 9,
                            Hour = "08:00-09:00"
                        },
                        new
                        {
                            Id = 10,
                            Hour = "09:00-10:00"
                        },
                        new
                        {
                            Id = 11,
                            Hour = "10:00-11:00"
                        },
                        new
                        {
                            Id = 12,
                            Hour = "11:00-12:00"
                        },
                        new
                        {
                            Id = 13,
                            Hour = "12:00-13:00"
                        },
                        new
                        {
                            Id = 14,
                            Hour = "13:00-14:00"
                        },
                        new
                        {
                            Id = 15,
                            Hour = "14:00-15:00"
                        },
                        new
                        {
                            Id = 16,
                            Hour = "15:00-16:00"
                        },
                        new
                        {
                            Id = 17,
                            Hour = "16:00-17:00"
                        },
                        new
                        {
                            Id = 18,
                            Hour = "17:00-18:00"
                        },
                        new
                        {
                            Id = 19,
                            Hour = "18:00-19:00"
                        },
                        new
                        {
                            Id = 20,
                            Hour = "19:00-20:00"
                        },
                        new
                        {
                            Id = 21,
                            Hour = "20:00-21:00"
                        },
                        new
                        {
                            Id = 22,
                            Hour = "21:00-22:00"
                        },
                        new
                        {
                            Id = 23,
                            Hour = "22:00-23:00"
                        },
                        new
                        {
                            Id = 24,
                            Hour = "23:00-00:00"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9cc64765-4239-4c42-b17f-87990db646a2",
                            RoleId = "c5d0125a-6b1b-44f0-b8f1-5df761b2fdad"
                        },
                        new
                        {
                            UserId = "8a71d934-9e20-4cca-b36c-4a92479e7688",
                            RoleId = "917dc531-7d54-4610-bbd8-ba19d58a3bc1"
                        },
                        new
                        {
                            UserId = "12fbb621-20b4-46d6-a7d7-1decb47cb8d6",
                            RoleId = "917dc531-7d54-4610-bbd8-ba19d58a3bc1"
                        },
                        new
                        {
                            UserId = "d8a4ead4-ab81-48fe-b579-cee04873290e",
                            RoleId = "917dc531-7d54-4610-bbd8-ba19d58a3bc1"
                        },
                        new
                        {
                            UserId = "8d510f94-282e-48a8-9d29-8417b1b92363",
                            RoleId = "917dc531-7d54-4610-bbd8-ba19d58a3bc1"
                        },
                        new
                        {
                            UserId = "cc01034f-bca2-400f-b85c-6b1e10c8ea03",
                            RoleId = "917dc531-7d54-4610-bbd8-ba19d58a3bc1"
                        },
                        new
                        {
                            UserId = "64028b84-a9f4-4402-8fb2-ebde010aa9d5",
                            RoleId = "917dc531-7d54-4610-bbd8-ba19d58a3bc1"
                        },
                        new
                        {
                            UserId = "0199b3ad-9def-40f4-b963-38aa8f589b13",
                            RoleId = "917dc531-7d54-4610-bbd8-ba19d58a3bc1"
                        },
                        new
                        {
                            UserId = "de075b3e-d5ed-4e01-924f-d512677385a7",
                            RoleId = "5764b7d0-abb9-45b5-853e-1feb1f8afd78"
                        },
                        new
                        {
                            UserId = "3325d6fb-f0c5-4658-a263-cd9ff59f2c9f",
                            RoleId = "5764b7d0-abb9-45b5-853e-1feb1f8afd78"
                        },
                        new
                        {
                            UserId = "53e24d2a-55f7-4c6e-9f77-97b91abd4240",
                            RoleId = "5764b7d0-abb9-45b5-853e-1feb1f8afd78"
                        },
                        new
                        {
                            UserId = "d7eaffa1-5d36-48a1-b3ed-e3a792e9f403",
                            RoleId = "5764b7d0-abb9-45b5-853e-1feb1f8afd78"
                        },
                        new
                        {
                            UserId = "e22c0505-5996-47c6-a11d-3a88d7fc9385",
                            RoleId = "5764b7d0-abb9-45b5-853e-1feb1f8afd78"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Appointment")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithOne("Appointment")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Appointment", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Available", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Availables")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.WorkingHours", "WorkingHours")
                        .WithMany()
                        .HasForeignKey("WorkingHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("Availables");

                    b.Navigation("Certificates");

                    b.Navigation("ConsultantsSpecializations");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Navigation("ConsultantsSpecializations");
                });
#pragma warning restore 612, 618
        }
    }
}
