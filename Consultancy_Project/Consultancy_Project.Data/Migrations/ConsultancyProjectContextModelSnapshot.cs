// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    partial class ConsultancyProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            Institution = "Amerikan Psikoloji Derneği"
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            Institution = "Amerikan Psikoloji Derneği (APA)"
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)"
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)"
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)"
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)"
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)"
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)"
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)"
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)"
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UserId = "bb4ae640-5453-4ad6-af0d-341899aeeaec",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 2,
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UserId = "86c2a29c-ea3a-42a2-ae55-28aad964a648",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UserId = "657e8e0f-118e-4058-ad8a-226953ed48e4",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UserId = "88f06875-4ba5-4fde-b05b-3e4570532296",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UserId = "4e7eb8c8-03ba-41a1-9db0-b66a34fae9ce",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UserId = "6ffdfd51-0f9a-43c9-a05a-0bc15e972d30",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UserId = "da225905-150f-48e6-9f42-68cf86864986",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "f987533b-0204-49f7-9d8b-72ea008ff4b6"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "7832aad9-0518-48ca-9517-d1dfd3529d42"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "663b5466-d86d-4292-ae29-e739536907a8"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "828e41dd-39e6-4750-a450-282812353eef"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "a7b3df57-5c10-4ac6-934d-646b471f1262"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "09eb9be9-ab6f-4a7d-b782-d57ec2900ef9",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7cb4fdf0-da38-4c39-b094-c0132e7d27e3",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "d6a9f350-cab9-4f80-8692-0c2bde055bbc",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "da225905-150f-48e6-9f42-68cf86864986",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "69d9f670-38b6-43b4-b592-8de29837bdb2",
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEO4/1pL+UTKyHNHllMpaPqGX6JFoHdcZsZSa0pzrVFlI0eKHkAUJ6kG1NSQVdDpCug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e8ae0d9-3d16-48f2-9a52-7a3f8bafc555",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "bb4ae640-5453-4ad6-af0d-341899aeeaec",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "94d396bb-b5b4-4a86-ace8-0cc9185b3851",
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELoFfcKkopJjsZ1WGRcrZMzhaPUMt4BAjkzTwyVwixklqGBV0OjNVn0nUblcOz5Reg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d6d1944-2e87-45d3-a5e6-845d0e64b332",
                            TwoFactorEnabled = false,
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "86c2a29c-ea3a-42a2-ae55-28aad964a648",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "9efddf5e-d3eb-4bcb-9eed-180216f313cc",
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKdt05FoFemg2EcJYVzeGctA8gCCXpevoAEqb0HhNRAzArjwDk1cm0oVR290ye+llA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8543c353-51f2-4504-89b2-971caa70ef97",
                            TwoFactorEnabled = false,
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "657e8e0f-118e-4058-ad8a-226953ed48e4",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "8c30317b-86c4-45e7-8cc8-2605a267e2c5",
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAELch1YHGBvZmCVj4vUPFoxZWCOW70inUlyJkvmuxnoPRY03fZmCVyBFkaSAmeGvnFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0adc425-9754-4a97-8bf1-ae60c1015a2e",
                            TwoFactorEnabled = false,
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "88f06875-4ba5-4fde-b05b-3e4570532296",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "4f0f6889-b9e2-40cf-a00d-c7a202379e21",
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAECL0adxbkgPiUjwJMDeu/mnW1cNvHAGL5cGWaYHR8TIrZHTxpweN/IYKM7kCVLcaKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7075e0a9-5694-4bae-8c4d-99663475653c",
                            TwoFactorEnabled = false,
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "4e7eb8c8-03ba-41a1-9db0-b66a34fae9ce",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "8ff8788e-ba7c-45c1-af00-4b8c2d3a314e",
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMjjG1stlC4OBqHRy0suOGknHO7Em9nw2N8BOUT6nShL5KEavMMBImYSJd+T7P/V8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9df302f0-9a78-414e-91f5-a913841345ed",
                            TwoFactorEnabled = false,
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "6ffdfd51-0f9a-43c9-a05a-0bc15e972d30",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "3aaca2e2-8b33-44a5-ba44-23a8b5f33a7a",
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBGLxtX7IagXLVNe1WuY4D5WO6zebIpCqGo7hjTIrQr42amJfvteKBHZPY3jsFzPBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9acd2c94-926f-44c2-b7a2-7bf0ebb94378",
                            TwoFactorEnabled = false,
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "04d4aec4-3564-4ac3-a099-b9a6ec4d3a42",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "fca46bdd-15ad-4b11-aadf-9d811b4e6bca",
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEEHrKShi6cXsMf9sOyKAbdz6rIaTyXIBuKk63allxlqZbivO7S6pENfqHD90fY5u+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b55c569-b516-4621-9628-eac75dcad2a4",
                            TwoFactorEnabled = false,
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "f987533b-0204-49f7-9d8b-72ea008ff4b6",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "3b705823-3ea2-4781-9557-25238e68698f",
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGHeaBeu4SFOapsYxuhbjjRs8OR5qC5kHe4f/U97sqRpyPhxBBBV7RKCKXBYUQ2Omg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b88741a-e83b-4504-944c-f96cfb87bcc4",
                            TwoFactorEnabled = false,
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "7832aad9-0518-48ca-9517-d1dfd3529d42",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "54773efc-c9c8-44d9-9167-69eb611be68c",
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEDS+vYUV9bFX+UH3sgbYW774IdtuwwTD1zAIVr7vilSq5iErNBNsJKRmaxngu3CAUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5bcaa2e-f98b-48e4-9d71-23e91f3110dd",
                            TwoFactorEnabled = false,
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "663b5466-d86d-4292-ae29-e739536907a8",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "8fb14392-6fa9-4523-9546-4ee27d0a6517",
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5gfg2aAoPsdtYv9FRMnLVu0p5TLAoazOdz++CQLMKOfecjYwPUvsUrtK3ex1Evsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40db63b9-a7b0-40c6-9ad3-6c19cfd0ebb4",
                            TwoFactorEnabled = false,
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "828e41dd-39e6-4750-a450-282812353eef",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "e1c1a6c1-b4dd-417e-951e-011a0223d819",
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAEP+1X/9Ywa9y+AhLW6q6DEq4I+KsFxw0+pd+0w8A1bQqfuQ6tySa9j8NuOcOqy4Dsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36bc8546-7516-43ca-8407-9a5fc8840c12",
                            TwoFactorEnabled = false,
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "a7b3df57-5c10-4ac6-934d-646b471f1262",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "f792df35-ea77-416d-a617-63d5c966fa7e",
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAELhNh4nXa7gnqQ335asYjkkWTg+S9i0jCj9MfI3Vsd8UyvxnW/PkFlw0FzuKlN/tUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c89bab4-911a-45aa-b56c-8b34137cd410",
                            TwoFactorEnabled = false,
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5601),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5613),
                            Url = "1.jpg",
                            UserId = "da225905-150f-48e6-9f42-68cf86864986"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5619),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5619),
                            Url = "2.jpg",
                            UserId = "bb4ae640-5453-4ad6-af0d-341899aeeaec"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5622),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5623),
                            Url = "3.jpg",
                            UserId = "86c2a29c-ea3a-42a2-ae55-28aad964a648"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5625),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5626),
                            Url = "4.jpg",
                            UserId = "657e8e0f-118e-4058-ad8a-226953ed48e4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5628),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5628),
                            Url = "5.jpg",
                            UserId = "88f06875-4ba5-4fde-b05b-3e4570532296"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5638),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5639),
                            Url = "6.jpg",
                            UserId = "4e7eb8c8-03ba-41a1-9db0-b66a34fae9ce"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5641),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5642),
                            Url = "7.jpg",
                            UserId = "6ffdfd51-0f9a-43c9-a05a-0bc15e972d30"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5644),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5645),
                            Url = "8.jpg",
                            UserId = "04d4aec4-3564-4ac3-a099-b9a6ec4d3a42"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5647),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5648),
                            Url = "9.jpg",
                            UserId = "f987533b-0204-49f7-9d8b-72ea008ff4b6"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5651),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5652),
                            Url = "10.jpg",
                            UserId = "7832aad9-0518-48ca-9517-d1dfd3529d42"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5654),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5654),
                            Url = "11.jpg",
                            UserId = "663b5466-d86d-4292-ae29-e739536907a8"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5656),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5657),
                            Url = "12.jpg",
                            UserId = "828e41dd-39e6-4750-a450-282812353eef"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5659),
                            ModifiedDate = new DateTime(2023, 4, 13, 12, 42, 21, 931, DateTimeKind.Local).AddTicks(5660),
                            Url = "13.jpg",
                            UserId = "a7b3df57-5c10-4ac6-934d-646b471f1262"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "da225905-150f-48e6-9f42-68cf86864986",
                            RoleId = "09eb9be9-ab6f-4a7d-b782-d57ec2900ef9"
                        },
                        new
                        {
                            UserId = "bb4ae640-5453-4ad6-af0d-341899aeeaec",
                            RoleId = "d6a9f350-cab9-4f80-8692-0c2bde055bbc"
                        },
                        new
                        {
                            UserId = "86c2a29c-ea3a-42a2-ae55-28aad964a648",
                            RoleId = "d6a9f350-cab9-4f80-8692-0c2bde055bbc"
                        },
                        new
                        {
                            UserId = "657e8e0f-118e-4058-ad8a-226953ed48e4",
                            RoleId = "d6a9f350-cab9-4f80-8692-0c2bde055bbc"
                        },
                        new
                        {
                            UserId = "88f06875-4ba5-4fde-b05b-3e4570532296",
                            RoleId = "d6a9f350-cab9-4f80-8692-0c2bde055bbc"
                        },
                        new
                        {
                            UserId = "4e7eb8c8-03ba-41a1-9db0-b66a34fae9ce",
                            RoleId = "d6a9f350-cab9-4f80-8692-0c2bde055bbc"
                        },
                        new
                        {
                            UserId = "6ffdfd51-0f9a-43c9-a05a-0bc15e972d30",
                            RoleId = "d6a9f350-cab9-4f80-8692-0c2bde055bbc"
                        },
                        new
                        {
                            UserId = "04d4aec4-3564-4ac3-a099-b9a6ec4d3a42",
                            RoleId = "d6a9f350-cab9-4f80-8692-0c2bde055bbc"
                        },
                        new
                        {
                            UserId = "f987533b-0204-49f7-9d8b-72ea008ff4b6",
                            RoleId = "7cb4fdf0-da38-4c39-b094-c0132e7d27e3"
                        },
                        new
                        {
                            UserId = "7832aad9-0518-48ca-9517-d1dfd3529d42",
                            RoleId = "7cb4fdf0-da38-4c39-b094-c0132e7d27e3"
                        },
                        new
                        {
                            UserId = "663b5466-d86d-4292-ae29-e739536907a8",
                            RoleId = "7cb4fdf0-da38-4c39-b094-c0132e7d27e3"
                        },
                        new
                        {
                            UserId = "828e41dd-39e6-4750-a450-282812353eef",
                            RoleId = "7cb4fdf0-da38-4c39-b094-c0132e7d27e3"
                        },
                        new
                        {
                            UserId = "a7b3df57-5c10-4ac6-934d-646b471f1262",
                            RoleId = "7cb4fdf0-da38-4c39-b094-c0132e7d27e3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Images")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Specializations")
                        .HasForeignKey("ConsultantId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
