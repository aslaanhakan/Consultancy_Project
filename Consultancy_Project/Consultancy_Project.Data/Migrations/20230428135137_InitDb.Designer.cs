// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    [Migration("20230428135137_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4369),
                            Institution = "Amerikan Psikoloji Derneği",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4370)
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4376),
                            Institution = "Amerikan Psikoloji Derneği (APA)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4376)
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4379),
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4380)
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4382),
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4383)
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4385),
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4386)
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4390),
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4391)
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4393),
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4394)
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4396),
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4397)
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4399),
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4400)
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4403),
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4404)
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4406),
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4407)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4037),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4039),
                            UserId = "2201d025-5b76-464d-aae3-edfe7aa48834",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4048),
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4049),
                            UserId = "2cb2f7e6-e238-4695-b794-faf3433291f3",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4054),
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4055),
                            UserId = "66ce77b9-9237-4a93-a746-dfb276bb9c1b",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4058),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4059),
                            UserId = "f84c1788-aa1c-4d9f-96a9-00e81ec7e580",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4062),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4063),
                            UserId = "4b9ebee9-26df-4513-afc8-88bda801b68c",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4067),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4068),
                            UserId = "47de91d5-5a68-420a-8492-5118b25b4d03",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4071),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4072),
                            UserId = "2da82f70-29cf-4f0f-9ea1-56f94c0278fc",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3969),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3974),
                            UserId = "1f4adf05-e534-4187-855b-d6d3e46d3c21"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3980),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3981),
                            UserId = "68cd7577-2024-4580-bbee-1460bfa02a51"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3984),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3985),
                            UserId = "b9aae3cf-7715-4293-bd17-4f2b4dac52c8"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3987),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3987),
                            UserId = "69296ea0-8cd2-4740-8fee-f188bd4c16ef"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3990),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3991),
                            UserId = "92f1cf4c-8094-4225-8193-feaad9432475"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4205),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4206)
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4214),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4215)
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4218),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4219)
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4222),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4223)
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4225),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4226)
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4230),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4231)
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4236),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4236)
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4240),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4240)
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4243),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4244)
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4247),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4248)
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4251),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4252)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "81a7cd0d-1a10-4bb8-8c56-ec882cb21fab",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c374ca7c-eee2-4c14-a95a-512150581312",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "03cff1bb-c7b3-4122-aa83-3bba504b500d",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "05b3d752-0546-4c73-80ea-db8b76a1d2b3",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "7e52c22b-f3b7-4af0-a878-7c1f941b1171",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3075),
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqp8V3lrilPRW0xWL8Go68BKfzURFEUOTcb+czxEUv8fmLr6Bcq/oVjs/BvPKrGqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1fcbbcd-0933-4531-a954-197505917101",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3087),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2201d025-5b76-464d-aae3-edfe7aa48834",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "85aa2979-d38e-416f-9f8f-f394a9746ca2",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3134),
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQcTOOhhTbu5PcO1Qo0sJWkyhbcZaWimzhbSMx52+05s/tKeYB1OXlKuuKZEiXX2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b284261-75f2-4bf5-9344-fa7fe011b3fa",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3136),
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "2cb2f7e6-e238-4695-b794-faf3433291f3",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "299928f1-c00e-4500-b651-8d7ca939ff0c",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3149),
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDyIBMrDAX6v0HUK6C9poVJzCCfDPKk5xr4n0Xv5cdCdQSalketFiWuNdInElR4Ceg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f85be3fc-f447-4bd8-b813-b83373b87224",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3150),
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "66ce77b9-9237-4a93-a746-dfb276bb9c1b",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "e2c38fe7-c6f6-4e07-aaef-347e9412d025",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3167),
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAECpF/x607gsL5UnpRX2+F2qmxY4vHmUEkNaPTr8nAn0VmF60zcLAkOVUdXMwg+LKgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aab3ecbf-f83e-4d29-bbd2-dac4d2cbb7a0",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3168),
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "f84c1788-aa1c-4d9f-96a9-00e81ec7e580",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "3372080d-9c3d-4ace-8d66-1b0a4890fb43",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3181),
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEFkFNc1R9vMHkDdD0tnPKS2aF8biMCoDXf4i9zQB4PJn7zU3FbgurY8VFJZkYyCeFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76ba3da3-047d-4ee8-97f4-6b72d587937d",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3182),
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "4b9ebee9-26df-4513-afc8-88bda801b68c",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "076c9fa6-8923-4e15-aef3-d9dcd7abf305",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3199),
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDUG66IagdemEAcA4yOD94EmZc7Jdc3vDPJ4JKkI0EatDtW1QGbkEeHMkfOXQEQepA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9adb8790-efd4-4d88-a136-ddbeec53e006",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3200),
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "47de91d5-5a68-420a-8492-5118b25b4d03",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "24aeec22-4f8d-4e24-bae1-3b49cac7072a",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3217),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAENVydPgip5cPyWo9c1jPRv3QjeqIojzCUVFfWaFTQ/yb0rlMsEcPYLGtPUAqyYe8Yg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5920ecff-9eac-4cb6-9379-166e5e16825e",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3218),
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "2da82f70-29cf-4f0f-9ea1-56f94c0278fc",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "9025603d-5729-4973-9b2b-3d681acca891",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3231),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ81VriggG7uKn6Y70QKOzxqsupQsOENFJRi8s1/B5h4bvkECbl/7G/aohiNx2IIIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4f2a540-7e5f-4d90-a138-5938b2ed68ae",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3231),
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "1f4adf05-e534-4187-855b-d6d3e46d3c21",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "be910080-8880-45af-b774-af6eddca102e",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3244),
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJQHOtS6mmCDdMzyvMB6/SOLSSroIYuvsdzc10Bd6F0ySVFw3IDDUL2QOs8ZFiCwfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0eb57fb3-217f-48b5-acb1-275431ae11dc",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3244),
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "68cd7577-2024-4580-bbee-1460bfa02a51",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "8933590b-4b99-4ebc-bb6a-a6003fe5d32c",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3283),
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEGygaugHl7Pi30kwpdhQki7ydMl0pNylELFr6p1B3th79njyT5y35mzTAQ1UwlgVNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f10307fb-619f-4499-922c-fc66897369ab",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3284),
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "b9aae3cf-7715-4293-bd17-4f2b4dac52c8",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "e2614eb9-05eb-4efa-9db0-6c873a23d603",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3352),
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBWj2MF5Ge6tZ7uuWCf6AMbIThwXprH/H/x/MPgkYPxMpFRHSGgrvfGMLKaEnpFYMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c25f3b09-bf6a-45f4-af35-8e4484b6a70b",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3352),
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "69296ea0-8cd2-4740-8fee-f188bd4c16ef",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "03bbc799-fa8c-49d0-9bf5-fd22ec1aaf6f",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3369),
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAEOB5gf1vhc+AYslu10T4VGUrjhg1eBVUGOA8eEoxA7YtOK8fyf7xoq4XWbnHeRIG+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe0a9cf9-983b-4d95-84cc-13d5ae881137",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3370),
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "92f1cf4c-8094-4225-8193-feaad9432475",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "3f4a10c7-9643-4aff-9a15-0f446348fa8a",
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3383),
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEMb6GzUf0LA9akhj01OkwrqarP/0n3szlXhF/ODzO4xhaL2ItyY3FSZ0We8bW2UOoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "558c9133-bcdb-4d3c-b000-b0a054d24c2c",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3383),
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4608),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4610),
                            Url = "1.jpg",
                            UserId = "05b3d752-0546-4c73-80ea-db8b76a1d2b3"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4617),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4618),
                            Url = "2.jpg",
                            UserId = "2201d025-5b76-464d-aae3-edfe7aa48834"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4621),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4621),
                            Url = "3.jpg",
                            UserId = "2cb2f7e6-e238-4695-b794-faf3433291f3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4624),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4625),
                            Url = "4.jpg",
                            UserId = "66ce77b9-9237-4a93-a746-dfb276bb9c1b"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4627),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4628),
                            Url = "5.jpg",
                            UserId = "f84c1788-aa1c-4d9f-96a9-00e81ec7e580"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4638),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4639),
                            Url = "6.jpg",
                            UserId = "4b9ebee9-26df-4513-afc8-88bda801b68c"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4641),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4642),
                            Url = "7.jpg",
                            UserId = "47de91d5-5a68-420a-8492-5118b25b4d03"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4645),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4646),
                            Url = "8.jpg",
                            UserId = "2da82f70-29cf-4f0f-9ea1-56f94c0278fc"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4648),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4649),
                            Url = "9.jpg",
                            UserId = "1f4adf05-e534-4187-855b-d6d3e46d3c21"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4653),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4653),
                            Url = "10.jpg",
                            UserId = "68cd7577-2024-4580-bbee-1460bfa02a51"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4656),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4657),
                            Url = "11.jpg",
                            UserId = "b9aae3cf-7715-4293-bd17-4f2b4dac52c8"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4659),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4660),
                            Url = "12.jpg",
                            UserId = "69296ea0-8cd2-4740-8fee-f188bd4c16ef"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4662),
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(4663),
                            Url = "13.jpg",
                            UserId = "92f1cf4c-8094-4225-8193-feaad9432475"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3869),
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3871)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3875),
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3882)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3903),
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3904)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3906),
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3907)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3909),
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3910)
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3913),
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3914)
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3916),
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3917)
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3919),
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3920)
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3922),
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3923)
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3926),
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3927)
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3929),
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları",
                            UpdatedTime = new DateTime(2023, 4, 28, 16, 51, 35, 535, DateTimeKind.Local).AddTicks(3930)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "05b3d752-0546-4c73-80ea-db8b76a1d2b3",
                            RoleId = "81a7cd0d-1a10-4bb8-8c56-ec882cb21fab"
                        },
                        new
                        {
                            UserId = "2201d025-5b76-464d-aae3-edfe7aa48834",
                            RoleId = "03cff1bb-c7b3-4122-aa83-3bba504b500d"
                        },
                        new
                        {
                            UserId = "2cb2f7e6-e238-4695-b794-faf3433291f3",
                            RoleId = "03cff1bb-c7b3-4122-aa83-3bba504b500d"
                        },
                        new
                        {
                            UserId = "66ce77b9-9237-4a93-a746-dfb276bb9c1b",
                            RoleId = "03cff1bb-c7b3-4122-aa83-3bba504b500d"
                        },
                        new
                        {
                            UserId = "f84c1788-aa1c-4d9f-96a9-00e81ec7e580",
                            RoleId = "03cff1bb-c7b3-4122-aa83-3bba504b500d"
                        },
                        new
                        {
                            UserId = "4b9ebee9-26df-4513-afc8-88bda801b68c",
                            RoleId = "03cff1bb-c7b3-4122-aa83-3bba504b500d"
                        },
                        new
                        {
                            UserId = "47de91d5-5a68-420a-8492-5118b25b4d03",
                            RoleId = "03cff1bb-c7b3-4122-aa83-3bba504b500d"
                        },
                        new
                        {
                            UserId = "2da82f70-29cf-4f0f-9ea1-56f94c0278fc",
                            RoleId = "03cff1bb-c7b3-4122-aa83-3bba504b500d"
                        },
                        new
                        {
                            UserId = "1f4adf05-e534-4187-855b-d6d3e46d3c21",
                            RoleId = "c374ca7c-eee2-4c14-a95a-512150581312"
                        },
                        new
                        {
                            UserId = "68cd7577-2024-4580-bbee-1460bfa02a51",
                            RoleId = "c374ca7c-eee2-4c14-a95a-512150581312"
                        },
                        new
                        {
                            UserId = "b9aae3cf-7715-4293-bd17-4f2b4dac52c8",
                            RoleId = "c374ca7c-eee2-4c14-a95a-512150581312"
                        },
                        new
                        {
                            UserId = "69296ea0-8cd2-4740-8fee-f188bd4c16ef",
                            RoleId = "c374ca7c-eee2-4c14-a95a-512150581312"
                        },
                        new
                        {
                            UserId = "92f1cf4c-8094-4225-8193-feaad9432475",
                            RoleId = "c374ca7c-eee2-4c14-a95a-512150581312"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("ConsultantsSpecializations");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Navigation("ConsultantsSpecializations");
                });
#pragma warning restore 612, 618
        }
    }
}
