// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    [Migration("20230425134256_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7649),
                            Institution = "Amerikan Psikoloji Derneği",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7650)
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7654),
                            Institution = "Amerikan Psikoloji Derneği (APA)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7655)
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7657),
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7658)
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7660),
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7660)
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7662),
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7663)
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7665),
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7666)
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7668),
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7669)
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7671),
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7671)
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7673),
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7674)
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7677),
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7678)
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7680),
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7681)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7387),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7388),
                            UserId = "5314f669-d35e-4683-ac85-cfb51c03e0d9",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7397),
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7398),
                            UserId = "8105cf00-98d1-4e1c-85e8-ff59f08495cb",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7401),
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7402),
                            UserId = "af0b4cbd-f511-402a-a893-64c081598a74",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7404),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7405),
                            UserId = "f23b11a4-46e3-45ec-a315-b06d584ca6f4",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7459),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7460),
                            UserId = "54a970b0-9f71-49ec-8b4a-bc278ed975fb",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7466),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7466),
                            UserId = "e43769c3-5ad5-424a-9e59-b7cfb1d59ed4",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7469),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7470),
                            UserId = "2d2a26fc-ebfd-41ab-8cdd-3b836f758d84",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7334),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7336),
                            UserId = "3c5daa4c-67ad-4df1-82eb-ad0f065f8f9b"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7340),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7340),
                            UserId = "50835d3d-d60d-42dd-b252-1b2246d10eb9"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7342),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7343),
                            UserId = "4a5459d2-77d5-4490-86ce-ce03a741d8ff"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7345),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7346),
                            UserId = "a4c2a0de-5829-4ce2-bf48-5f77a4d34f33"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7347),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7348),
                            UserId = "e4dc147e-1b4d-4d21-b833-fedfbb6114d4"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7515),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7515)
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7520),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7521)
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7525),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7526)
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7530),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7531)
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7534),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7535)
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7539),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7540)
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7543),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7543)
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7546),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7547)
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7549),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7550)
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7554),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7554)
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7557),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7557)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "693d2e26-8e77-4ffb-bc56-10ac00b0143e",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "38b01197-6e65-479c-846c-cdbc97bc05e8",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "c79a1131-8a14-4b88-accd-0dff6d607dad",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ec40bfe8-297b-4a6e-9843-bb6ab63f3628",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "449229c8-3163-492d-b012-482b8e05dd5b",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6480),
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJaVfID4sx08G0DM3mGCbqKuLgN5xmCD8oZvyJnlzvsC5nmUD3RIaMM40/G2K9PaZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "022bf6a6-56cf-4b24-8744-5e686b70f696",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6494),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5314f669-d35e-4683-ac85-cfb51c03e0d9",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "3ca7c804-d991-4974-af0a-8112e17c8a61",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6520),
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGXuMJpYe5BKldo5M+Xb5yS3N0tp3UrTBmvWJNSzI9udlm8HHGuXxO/hEdIfHe21TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "070eb1f2-baac-4c9d-bc5b-680b58852f74",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6521),
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "8105cf00-98d1-4e1c-85e8-ff59f08495cb",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "eaa6a9c9-60a2-4a45-8e57-a1b805ba76be",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6549),
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZvJkYM2Zsi8Xj0rV0XfSIKzP/2wK1Qh2+90FaG51+I7lCadxt6oVLKKlFIARWe6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "126a1fb3-1999-4fc0-9408-19026fcb7525",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6550),
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "af0b4cbd-f511-402a-a893-64c081598a74",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "335245f2-2723-483f-bb63-bc210fbfc427",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6561),
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAELGBS1uptZZp1kehL4BwH/9m7DcvURUpk33owcmKuYP9ZGV7UjKma7uxjEz7yw4vRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd5d7c08-823b-4765-b2fe-de93a66e95bd",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6562),
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "f23b11a4-46e3-45ec-a315-b06d584ca6f4",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "c8da70d5-2a66-42be-97b7-93602da704e7",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6575),
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6KkLkqPTRxvltixHbt7/wavBAhwjKrQzMKDOfkYU8quDDsI7FmBoLJWKFUUGKFKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84df651a-42b2-4657-9e70-668ce8ef62a4",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6576),
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "54a970b0-9f71-49ec-8b4a-bc278ed975fb",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "250b3e3f-c4a5-4f17-a07e-8f808ae9b129",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6595),
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEM9rHUyG8OYjtg5S/Hch++yQ0Ms46HDNyxolvUibHcfDCxj+N8h/gBP4QT9hTifXag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3d6ab90-d770-49c3-a421-e84f72b604df",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6596),
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "e43769c3-5ad5-424a-9e59-b7cfb1d59ed4",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "5a814ca6-c9e5-47db-ab26-65219c8d0789",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6607),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKVoi+ZfyA8YpaNJlFeFazPAOSATRAa74Z7/MSNl/QlB73ftQZFESeNEMUVOxILZEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed60a740-54ea-43e3-878f-dcb3979a87fb",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6609),
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "2d2a26fc-ebfd-41ab-8cdd-3b836f758d84",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "e996b976-5b47-4bd3-8597-0905fe5fd279",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6623),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEAazFYbvvHojd6MaiCfKI0Ga9jn4sjnV0CPiW3LnUfjwFqYGMgxtwSy1dAEfTlNrIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "247debb5-71ab-4df4-8f4f-42d6361b590b",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6625),
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "3c5daa4c-67ad-4df1-82eb-ad0f065f8f9b",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "036ea6b5-88dc-4252-9505-37df0fdea834",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6636),
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKeIrxYhI0wYpdO1RNiZ2zCauOnmyYoCBYJkQy2UkZV8g9k+1Pn/rvsq2ZzO5MatKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28bd79a8-504f-4668-8d01-c92f9280c579",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6638),
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "50835d3d-d60d-42dd-b252-1b2246d10eb9",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "5cc05897-43e7-4581-b1f1-fae448322dd3",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6773),
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEJcw6xWz40kgtctvZSuRmVCqENu70rd3eP1eLSVHwCxJi6G1LTJ3LV0XllQxadPa3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a34e34ce-4ccf-4aa5-bfb0-85f27e2e7ecb",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6775),
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "4a5459d2-77d5-4490-86ce-ce03a741d8ff",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "adb12668-f17f-4657-8512-60c7c7364988",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6792),
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELsOmyk65OSEwLxknh74OqBmxxPQcwGVpWfzNWvR3LDdkk4FfT9mD2eGTku+craFyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad5b8f7c-df88-448d-8ab9-31df3dbc6eb8",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6792),
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "a4c2a0de-5829-4ce2-bf48-5f77a4d34f33",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "832bc8cc-bd59-4c53-bd54-d517742de5a6",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6806),
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAEBl86dpHNYjpLxqE79+SLFaXShRsoxr3e6JKJiber05AHYNO57U9/kh3hr2EO7JqUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "416afa3e-acd5-41d6-b7fa-d0e3fc648799",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6807),
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "e4dc147e-1b4d-4d21-b833-fedfbb6114d4",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "e4afa130-99b0-4fc5-90b5-446995df5a1a",
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6822),
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAENSjrC1CfhFFjckzBrjaHB4eOvycLsiYSalXicQPTaB8HsUYmy5cYXQKi3n0sMWakw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd0c0080-21bf-4029-985c-1a4cee8541bf",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(6823),
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7849),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7851),
                            Url = "1.jpg",
                            UserId = "ec40bfe8-297b-4a6e-9843-bb6ab63f3628"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7857),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7858),
                            Url = "2.jpg",
                            UserId = "5314f669-d35e-4683-ac85-cfb51c03e0d9"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7861),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7862),
                            Url = "3.jpg",
                            UserId = "8105cf00-98d1-4e1c-85e8-ff59f08495cb"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7864),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7864),
                            Url = "4.jpg",
                            UserId = "af0b4cbd-f511-402a-a893-64c081598a74"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7866),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7867),
                            Url = "5.jpg",
                            UserId = "f23b11a4-46e3-45ec-a315-b06d584ca6f4"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7876),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7877),
                            Url = "6.jpg",
                            UserId = "54a970b0-9f71-49ec-8b4a-bc278ed975fb"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7879),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7879),
                            Url = "7.jpg",
                            UserId = "e43769c3-5ad5-424a-9e59-b7cfb1d59ed4"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7881),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7882),
                            Url = "8.jpg",
                            UserId = "2d2a26fc-ebfd-41ab-8cdd-3b836f758d84"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7884),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7885),
                            Url = "9.jpg",
                            UserId = "3c5daa4c-67ad-4df1-82eb-ad0f065f8f9b"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7888),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7889),
                            Url = "10.jpg",
                            UserId = "50835d3d-d60d-42dd-b252-1b2246d10eb9"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7891),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7891),
                            Url = "11.jpg",
                            UserId = "4a5459d2-77d5-4490-86ce-ce03a741d8ff"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7893),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7894),
                            Url = "12.jpg",
                            UserId = "a4c2a0de-5829-4ce2-bf48-5f77a4d34f33"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7896),
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7897),
                            Url = "13.jpg",
                            UserId = "e4dc147e-1b4d-4d21-b833-fedfbb6114d4"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7251),
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7253)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7257),
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7261)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7273),
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7274)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7276),
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7277)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7278),
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7279)
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7282),
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7283)
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7285),
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7285)
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7287),
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7288)
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7289),
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7290)
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7293),
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7294)
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7295),
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları",
                            UpdatedTime = new DateTime(2023, 4, 25, 16, 42, 54, 151, DateTimeKind.Local).AddTicks(7296)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ec40bfe8-297b-4a6e-9843-bb6ab63f3628",
                            RoleId = "693d2e26-8e77-4ffb-bc56-10ac00b0143e"
                        },
                        new
                        {
                            UserId = "5314f669-d35e-4683-ac85-cfb51c03e0d9",
                            RoleId = "c79a1131-8a14-4b88-accd-0dff6d607dad"
                        },
                        new
                        {
                            UserId = "8105cf00-98d1-4e1c-85e8-ff59f08495cb",
                            RoleId = "c79a1131-8a14-4b88-accd-0dff6d607dad"
                        },
                        new
                        {
                            UserId = "af0b4cbd-f511-402a-a893-64c081598a74",
                            RoleId = "c79a1131-8a14-4b88-accd-0dff6d607dad"
                        },
                        new
                        {
                            UserId = "f23b11a4-46e3-45ec-a315-b06d584ca6f4",
                            RoleId = "c79a1131-8a14-4b88-accd-0dff6d607dad"
                        },
                        new
                        {
                            UserId = "54a970b0-9f71-49ec-8b4a-bc278ed975fb",
                            RoleId = "c79a1131-8a14-4b88-accd-0dff6d607dad"
                        },
                        new
                        {
                            UserId = "e43769c3-5ad5-424a-9e59-b7cfb1d59ed4",
                            RoleId = "c79a1131-8a14-4b88-accd-0dff6d607dad"
                        },
                        new
                        {
                            UserId = "2d2a26fc-ebfd-41ab-8cdd-3b836f758d84",
                            RoleId = "c79a1131-8a14-4b88-accd-0dff6d607dad"
                        },
                        new
                        {
                            UserId = "3c5daa4c-67ad-4df1-82eb-ad0f065f8f9b",
                            RoleId = "38b01197-6e65-479c-846c-cdbc97bc05e8"
                        },
                        new
                        {
                            UserId = "50835d3d-d60d-42dd-b252-1b2246d10eb9",
                            RoleId = "38b01197-6e65-479c-846c-cdbc97bc05e8"
                        },
                        new
                        {
                            UserId = "4a5459d2-77d5-4490-86ce-ce03a741d8ff",
                            RoleId = "38b01197-6e65-479c-846c-cdbc97bc05e8"
                        },
                        new
                        {
                            UserId = "a4c2a0de-5829-4ce2-bf48-5f77a4d34f33",
                            RoleId = "38b01197-6e65-479c-846c-cdbc97bc05e8"
                        },
                        new
                        {
                            UserId = "e4dc147e-1b4d-4d21-b833-fedfbb6114d4",
                            RoleId = "38b01197-6e65-479c-846c-cdbc97bc05e8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany("ConsultantsSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("ConsultantsSpecializations");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Navigation("ConsultantsSpecializations");
                });
#pragma warning restore 612, 618
        }
    }
}
