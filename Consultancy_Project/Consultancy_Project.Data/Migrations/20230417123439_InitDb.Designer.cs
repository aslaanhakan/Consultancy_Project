// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    [Migration("20230417123439_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5747),
                            Institution = "Amerikan Psikoloji Derneği",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5748)
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5753),
                            Institution = "Amerikan Psikoloji Derneği (APA)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5754)
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5756),
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5756)
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5758),
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5759)
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5761),
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5762)
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5765),
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5766)
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5768),
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5769)
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5771),
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5771)
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5773),
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5774)
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5777),
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5778)
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5780),
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5780)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5497),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5498),
                            UserId = "a950a3d8-d54c-48cc-9168-2cb9baaa8783",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5507),
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5508),
                            UserId = "6992bbea-a922-4cab-b8e0-b2d2bdcd1afc",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5511),
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5512),
                            UserId = "5d2f0c4c-91b8-4d19-b768-28d53b500683",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5515),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5515),
                            UserId = "7f3edf88-2b2d-4048-ab60-e05be8d14aac",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5519),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5519),
                            UserId = "3ee5e687-3a26-4f1b-9a40-10bad3e75419",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5523),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5524),
                            UserId = "69afb770-d3ab-46c6-9d20-8503ad5e48ee",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5527),
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5528),
                            UserId = "deedc854-e16b-4fc8-8271-9202b28f2308",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5443),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5444),
                            UserId = "a1c135c1-04b5-4d40-b388-394ac4778a19"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5452),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5452),
                            UserId = "967f829a-2d6f-4d11-8a4b-e6fb34cc04d4"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5454),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5455),
                            UserId = "8f2a5636-607a-4879-b349-45533acb52ff"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5457),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5458),
                            UserId = "96c9641e-24ac-41ed-a72d-46b814b945b7"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5459),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5460),
                            UserId = "880cefef-3a03-4c56-b7a6-1b3bdefc4515"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5568),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5569)
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5574),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5575)
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5577),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5578)
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5580),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5581)
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5584),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5585)
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5588),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5589)
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5591),
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5592)
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5595),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5596)
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5599),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5600)
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5603),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5604)
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5607),
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5608)
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11ad09bb-1078-4882-9c50-a537a254dc9c",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "475521ed-2cba-4da4-9b88-b166f5966f55",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "32f68bf3-5b3c-48ee-b9bd-4fc560d00a3a",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fde1f674-50c4-41f2-a034-d05b278e2644",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "492e8f47-0664-4c3d-9e81-9d5b93358d27",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4740),
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7XzVq3U/K1i79JsdVSZvdfM3LTy8nsudJDwa2niGAErfPUQi+Q4CU+FC8Rm+tzmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b93d5d33-9c8b-4207-afa8-39abb454eaa8",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4755),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "a950a3d8-d54c-48cc-9168-2cb9baaa8783",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "e09b21d1-d5cd-45ac-a7f7-8fc2578a0a7c",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4781),
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBReebCEKvEGyM66cAGWmaljlNED8TYDLTTbrViR3ZdpN30X0ch1ULvszb4HG9I9LA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab35f781-2821-4997-96e6-e8cd68fe26f3",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4782),
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "6992bbea-a922-4cab-b8e0-b2d2bdcd1afc",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "1d94f05e-c4da-43b0-843a-0fcb44f57cc9",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4795),
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGYDXaN/c8RnoRhmjinqCQCmga+2JJjJgEAduFhEo3jZRRmsY+Ecbr7vtj3KnJA/rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b3a2cb3-628d-4713-abc2-4c664920001b",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4796),
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "5d2f0c4c-91b8-4d19-b768-28d53b500683",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "6facfba8-004e-46a1-b4d3-b04222dd27f2",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4811),
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PasswordHash = "AQAAAAIAAYagAAAAEIfAnREu8RBAkG/fYp9w0aK3EcDdE/ojJBE/yI4A7lRMz+ZZRqWVXGnwa8A6BUcTRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e09d9ec1-f92d-4671-bdb0-439679286335",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4811),
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "7f3edf88-2b2d-4048-ab60-e05be8d14aac",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "6b796682-8705-46e8-96df-992e0cd73263",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4823),
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4q+EdHbTm8Q4okkfzfMQuQdlFMTaF46WeU2f16MzrDvmuDVFhmU7IAhnkteOlRKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dac4f8c2-3c02-4fdd-a31c-d77a5c3c7e2c",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4824),
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "3ee5e687-3a26-4f1b-9a40-10bad3e75419",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "a7204247-3020-4ecf-897b-05dd8a824708",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4837),
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECbRDnqMKF7QpxYn3V3mD9bLHRV+lDw8wv4C2aJTa1YzzSvyTcbH0xeu8AlPWtJDiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f01f1e4a-7303-496c-867a-5ab0545461d5",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4838),
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "69afb770-d3ab-46c6-9d20-8503ad5e48ee",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "d904a4fd-63e3-40da-b9ee-dd0044822647",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4853),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKk3SIZeRe7aoy+mw5L5oRBP18w3Tu4qMc7fzky0MlrK3W0BRKuD9A8ruO10rDFUHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddae402d-0f36-4106-936d-481b6d586d04",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4853),
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "deedc854-e16b-4fc8-8271-9202b28f2308",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "e8d6618a-9f2f-4b93-a48c-9edd05fa266c",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4865),
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEH0IxlQXMGkXXWMzwpjxS0lYuAA6wTDh4CwrJYvbHoW6/WdpOTJeOyKLNtLkCo0Kow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c37a909-c6da-41f9-a05e-6abe92aeb637",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4866),
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "a1c135c1-04b5-4d40-b388-394ac4778a19",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "fdc8769a-1d54-46ad-9af1-b41ca7963aac",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4880),
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAyFkOxYenbaU2eulByQJCtWzE26X51jouoajoQdgCvXUVSPlzxL4d0G6poVyJHXEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08c7af87-e45d-4180-8f57-9e45a76f7d80",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4880),
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "967f829a-2d6f-4d11-8a4b-e6fb34cc04d4",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "eb5617c1-c76b-4f18-b5e1-48c2b8b67e70",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4912),
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEDukKXs7K+ENVcMDG+T7li+8VFtI1+Sg7+0YioIheXSHk0QiUxMkl7ZGgSjrpVri0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24012482-68d7-4699-b2f7-2d8d12dff202",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4913),
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "8f2a5636-607a-4879-b349-45533acb52ff",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "ffe769bc-c48b-49fa-9fd4-91c5fe4edc0b",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4925),
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC5mQV3r0NNUXhqxIrUbHi7n8PmUvenx82ww7zpQjpvifuJqH0JSBVdzBXJZYSa/Fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b44f4e1-5d59-4fd5-974e-5959531253cb",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4926),
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "96c9641e-24ac-41ed-a72d-46b814b945b7",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "70420235-9d26-4f7c-875c-90e818f804dc",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4939),
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PasswordHash = "AQAAAAIAAYagAAAAEMJNuWD7LNwQJ2oMGWaoR6kDsR4r3a2IpKkgN6UUbqZckueON3ziAFnwzLwvNfAR8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "423fe046-e5cf-40a0-aed1-5749ebdf5507",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4939),
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "880cefef-3a03-4c56-b7a6-1b3bdefc4515",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "c4c5ecd3-3c93-4461-be38-77790460f7d9",
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4951),
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAECK4IBLLKSXIT/mMN1w7hVQPgVBe/2E9mD0X3tH64nJUWnIqolF9gh/CQTB76c4bIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1fa7338-ca42-4d1b-afc7-72f13b566d9b",
                            TwoFactorEnabled = false,
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(4952),
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5905),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5906),
                            Url = "1.jpg",
                            UserId = "fde1f674-50c4-41f2-a034-d05b278e2644"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5912),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5913),
                            Url = "2.jpg",
                            UserId = "a950a3d8-d54c-48cc-9168-2cb9baaa8783"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5916),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5916),
                            Url = "3.jpg",
                            UserId = "6992bbea-a922-4cab-b8e0-b2d2bdcd1afc"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5918),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5919),
                            Url = "4.jpg",
                            UserId = "5d2f0c4c-91b8-4d19-b768-28d53b500683"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5922),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5922),
                            Url = "5.jpg",
                            UserId = "7f3edf88-2b2d-4048-ab60-e05be8d14aac"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5932),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5933),
                            Url = "6.jpg",
                            UserId = "3ee5e687-3a26-4f1b-9a40-10bad3e75419"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5935),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5936),
                            Url = "7.jpg",
                            UserId = "69afb770-d3ab-46c6-9d20-8503ad5e48ee"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5938),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5939),
                            Url = "8.jpg",
                            UserId = "deedc854-e16b-4fc8-8271-9202b28f2308"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5941),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5941),
                            Url = "9.jpg",
                            UserId = "a1c135c1-04b5-4d40-b388-394ac4778a19"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5944),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5945),
                            Url = "10.jpg",
                            UserId = "967f829a-2d6f-4d11-8a4b-e6fb34cc04d4"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5947),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5948),
                            Url = "11.jpg",
                            UserId = "8f2a5636-607a-4879-b349-45533acb52ff"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5950),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5951),
                            Url = "12.jpg",
                            UserId = "96c9641e-24ac-41ed-a72d-46b814b945b7"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5953),
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5954),
                            Url = "13.jpg",
                            UserId = "880cefef-3a03-4c56-b7a6-1b3bdefc4515"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5363),
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5364)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5369),
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5373)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5385),
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5386)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5387),
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5388)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5389),
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5390)
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5393),
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5394)
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5395),
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5396)
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5397),
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5398)
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5399),
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5400)
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5403),
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5404)
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5405),
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları",
                            UpdatedTime = new DateTime(2023, 4, 17, 15, 34, 37, 426, DateTimeKind.Local).AddTicks(5406)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fde1f674-50c4-41f2-a034-d05b278e2644",
                            RoleId = "11ad09bb-1078-4882-9c50-a537a254dc9c"
                        },
                        new
                        {
                            UserId = "a950a3d8-d54c-48cc-9168-2cb9baaa8783",
                            RoleId = "32f68bf3-5b3c-48ee-b9bd-4fc560d00a3a"
                        },
                        new
                        {
                            UserId = "6992bbea-a922-4cab-b8e0-b2d2bdcd1afc",
                            RoleId = "32f68bf3-5b3c-48ee-b9bd-4fc560d00a3a"
                        },
                        new
                        {
                            UserId = "5d2f0c4c-91b8-4d19-b768-28d53b500683",
                            RoleId = "32f68bf3-5b3c-48ee-b9bd-4fc560d00a3a"
                        },
                        new
                        {
                            UserId = "7f3edf88-2b2d-4048-ab60-e05be8d14aac",
                            RoleId = "32f68bf3-5b3c-48ee-b9bd-4fc560d00a3a"
                        },
                        new
                        {
                            UserId = "3ee5e687-3a26-4f1b-9a40-10bad3e75419",
                            RoleId = "32f68bf3-5b3c-48ee-b9bd-4fc560d00a3a"
                        },
                        new
                        {
                            UserId = "69afb770-d3ab-46c6-9d20-8503ad5e48ee",
                            RoleId = "32f68bf3-5b3c-48ee-b9bd-4fc560d00a3a"
                        },
                        new
                        {
                            UserId = "deedc854-e16b-4fc8-8271-9202b28f2308",
                            RoleId = "32f68bf3-5b3c-48ee-b9bd-4fc560d00a3a"
                        },
                        new
                        {
                            UserId = "a1c135c1-04b5-4d40-b388-394ac4778a19",
                            RoleId = "475521ed-2cba-4da4-9b88-b166f5966f55"
                        },
                        new
                        {
                            UserId = "967f829a-2d6f-4d11-8a4b-e6fb34cc04d4",
                            RoleId = "475521ed-2cba-4da4-9b88-b166f5966f55"
                        },
                        new
                        {
                            UserId = "8f2a5636-607a-4879-b349-45533acb52ff",
                            RoleId = "475521ed-2cba-4da4-9b88-b166f5966f55"
                        },
                        new
                        {
                            UserId = "96c9641e-24ac-41ed-a72d-46b814b945b7",
                            RoleId = "475521ed-2cba-4da4-9b88-b166f5966f55"
                        },
                        new
                        {
                            UserId = "880cefef-3a03-4c56-b7a6-1b3bdefc4515",
                            RoleId = "475521ed-2cba-4da4-9b88-b166f5966f55"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Image")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Specializations")
                        .HasForeignKey("ConsultantId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
