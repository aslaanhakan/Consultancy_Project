// <auto-generated />
using System;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultancy_Project.Data.Migrations
{
    [DbContext(typeof(ConsultancyProjectContext))]
    [Migration("20230411102009_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificateTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateName = "Psikolojik Danışmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            Institution = "Amerikan Psikoloji Derneği"
                        },
                        new
                        {
                            Id = 2,
                            CertificateName = "Psikologlar için Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            Institution = "Amerikan Psikoloji Derneği (APA)"
                        },
                        new
                        {
                            Id = 3,
                            CertificateName = "Sertifikalı Klinik Zihinsel Sağlık Danışmanı",
                            CertificateTime = 2015,
                            ConsultantId = 3,
                            Institution = "Ulusal Psikoloji Sertifikasyon Kurulu (National Board for Certified Counselors, NBCC)"
                        },
                        new
                        {
                            Id = 4,
                            CertificateName = "Avrupa Psikolog (EuroPsy) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 4,
                            Institution = "Avrupa Psikoloji Federasyonu (European Federation of Psychologists' Associations, EFPA)"
                        },
                        new
                        {
                            Id = 11,
                            CertificateName = "Kognitif Davranış Terapisi (KDT) Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 5,
                            Institution = "İngiliz Psikoloji Derneği (British Psychological Society, BPS)"
                        },
                        new
                        {
                            Id = 5,
                            CertificateName = "Psikologlar için Özel Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            Institution = "Kanada Psikologlar Derneği (Canadian Psychological Association, CPA)"
                        },
                        new
                        {
                            Id = 6,
                            CertificateName = "Psikodrama Uzmanlık Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 1,
                            Institution = "Ulusal Psikodrama Derneği (National Psychodrama Association, NPA)"
                        },
                        new
                        {
                            Id = 7,
                            CertificateName = "Sanat Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            Institution = "Amerikan Sanat Terapisi Derneği (American Art Therapy Association, AATA)"
                        },
                        new
                        {
                            Id = 8,
                            CertificateName = "Hipnoterapi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 2,
                            Institution = "Hipnoz ve Hipnoterapi Derneği (Hypnosis and Hypnotherapy Association, HHA)"
                        },
                        new
                        {
                            Id = 9,
                            CertificateName = "Oyun Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 6,
                            Institution = "Oyun Terapisi Derneği (Association for Play Therapy, APT)"
                        },
                        new
                        {
                            Id = 10,
                            CertificateName = "Çift ve Aile Terapisi Sertifikası",
                            CertificateTime = 2015,
                            ConsultantId = 7,
                            Institution = "Aile ve Çift Terapisi Derneği (American Association for Marriage and Family Therapy, AAMFT)"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Promotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VisitsPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Consultants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Zorlu yaşam deneyimlerinizle baş etmenizde size destek olmak için burada. Kendinizi daha iyi hissetmek ve hayatınızda olumlu değişiklikler yapmak için birlikte çalışabiliriz.",
                            UserId = "c0c74e57-fc4d-449b-9855-eeb94e6c15ee",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 2,
                            JobTitle = "Klinik Psikolog",
                            Promotion = "Yıllardır psikolojik danışmanlık yapıyorum ve kişisel gelişim ve ruh sağlığı konularında uzmanım. Size uygun terapi yöntemleri kullanarak hayatınızı daha mutlu ve sağlıklı hale getirmek için buradayım.",
                            UserId = "e41edcca-174d-4b77-b926-3b242da02fee",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 3,
                            JobTitle = "Psikolog",
                            Promotion = "Hayatınızdaki stresi, kaygıyı ve depresyonu azaltmanıza yardımcı olmak için burada. Kendinize ve yaşam kalitenize yatırım yapmak istiyorsanız, size destek olabilirim.",
                            UserId = "88f0eb29-bd71-4273-864c-9842e3b96a27",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 4,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Psikolojik danışmanlıkta uzmanım ve çift terapisi konusunda özellikle deneyimliyim. İlişkilerinizde sorun yaşıyorsanız, size yardımcı olmak için buradayım.",
                            UserId = "9b9ec15d-8213-4579-8dce-4b68f5a0011d",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 5,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Herhangi bir sorununuzda size yardımcı olmak için burada. Kişisel gelişim, özsaygı, aile ilişkileri ve daha birçok konuda size destek olabilirim.",
                            UserId = "cd43e623-b7f7-4b25-8cd9-6f4f62bc41fd",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 6,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Çocukluk travmaları, kayıp ve yas gibi konularda danışmanlık yapmaktayım. Kendinizi daha iyi hissetmeniz ve zihinsel sağlığınızı korumanız için size yardımcı olabilirim.",
                            UserId = "46011f1e-158e-4662-8c72-5780301b9935",
                            VisitsPrice = 100m
                        },
                        new
                        {
                            Id = 7,
                            JobTitle = "Psikolojik Danışman",
                            Promotion = "Stres yönetimi, öfke kontrolü ve bağımlılıkla mücadele konularında deneyimliyim. Kendinizi daha iyi hissetmek ve olumlu değişiklikler yapmak için size yardımcı olabilirim.",
                            UserId = "635aaef7-edd5-4d60-ae13-e7c687142967",
                            VisitsPrice = 100m
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "SpecializationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ConsultantsSpecializations");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 1,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 2,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 8
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 3,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 2
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 10
                        },
                        new
                        {
                            ConsultantId = 4,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 6
                        },
                        new
                        {
                            ConsultantId = 5,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 3
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 5
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 9
                        },
                        new
                        {
                            ConsultantId = 6,
                            SpecializationId = 11
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 1
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 4
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 7
                        },
                        new
                        {
                            ConsultantId = 7,
                            SpecializationId = 10
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "618a9587-0777-4025-a9e8-e00cbf5f8032"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "0222e488-3879-4166-9b86-9205d177c1d9"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "d838b305-c9fe-40e8-84ab-1d872299e235"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "d1c5bc6f-5e02-410a-9f53-06a80eb712ef"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "f0331525-2680-4b01-a168-f766e6660895"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsultantId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersConsultans");

                    b.HasData(
                        new
                        {
                            ConsultantId = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            ConsultantId = 3,
                            CustomerId = 2
                        },
                        new
                        {
                            ConsultantId = 2,
                            CustomerId = 3
                        },
                        new
                        {
                            ConsultantId = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            ConsultantId = 5,
                            CustomerId = 5
                        },
                        new
                        {
                            ConsultantId = 7,
                            CustomerId = 4
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DegreeofGraduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GraduationYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StartYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsultantId = 1,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi",
                            GraduationYear = 2013,
                            SchoolName = "Anadolu Üniversitesi",
                            StartYear = 2009
                        },
                        new
                        {
                            Id = 2,
                            ConsultantId = 2,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Hacettepe Üniversitesi",
                            StartYear = 2013
                        },
                        new
                        {
                            Id = 3,
                            ConsultantId = 3,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2016,
                            SchoolName = "Dokuz Eylül Üniversitesi",
                            StartYear = 2012
                        },
                        new
                        {
                            Id = 4,
                            ConsultantId = 4,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Psikolojik Danışmanlık ve Rehberlik",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2013
                        },
                        new
                        {
                            Id = 5,
                            ConsultantId = 5,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Rehberlik ve Psikolojik Danışmanlık",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Marmara Üniversitesi",
                            StartYear = 2014
                        },
                        new
                        {
                            Id = 6,
                            ConsultantId = 6,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "Gazi Üniversitesi",
                            StartYear = 2011
                        },
                        new
                        {
                            Id = 7,
                            ConsultantId = 7,
                            DegreeofGraduation = "Lisans",
                            DepartmentName = "Özel Eğitim",
                            FacultyName = "Eğitim Bilimleri Fakültesi",
                            GraduationYear = 2017,
                            SchoolName = "Ankara Üniversitesi",
                            StartYear = 2013
                        },
                        new
                        {
                            Id = 8,
                            ConsultantId = 1,
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Cerrahpaşa Tıp Fakültesi",
                            GraduationYear = 2015,
                            SchoolName = "İstanbul Üniversitesi",
                            StartYear = 2013
                        },
                        new
                        {
                            Id = 9,
                            ConsultantId = 3,
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2018,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2016
                        },
                        new
                        {
                            Id = 10,
                            ConsultantId = 7,
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2019,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2017
                        },
                        new
                        {
                            Id = 11,
                            ConsultantId = 5,
                            DegreeofGraduation = "Yüksek Lisans",
                            DepartmentName = "Psikiyatri",
                            FacultyName = "Tıp Fakültesi",
                            GraduationYear = 2020,
                            SchoolName = "Ege Üniversitesi",
                            StartYear = 2018
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3fd5009-ad6e-4079-a668-7b007c1ac98c",
                            Description = "Yönetici",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d7fe43d9-043c-4860-afbd-d49707cad173",
                            Description = "Kullanıcı",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "a743e6cd-3ef3-41fb-8762-15f35532d5bb",
                            Description = "Danışanman",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "635aaef7-edd5-4d60-ae13-e7c687142967",
                            AccessFailedCount = 0,
                            Address = " Özger Cad.No:6 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "34fe789d-5f98-4054-a262-4ff219537997",
                            DateOfBirth = new DateTime(1996, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@consultancy.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            Gender = "Erkek",
                            LastName = "Aslan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.CONSULTANCY.COM",
                            NormalizedUserName = "ADMIN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd9e946a-649a-4794-81f3-7c134279aba6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "c0c74e57-fc4d-449b-9855-eeb94e6c15ee",
                            AccessFailedCount = 0,
                            Address = "Cemal Gürsel Cd. No:5 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "da6ab417-c42b-4268-9994-d45b4650274a",
                            DateOfBirth = new DateTime(1992, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILMAZ",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "165c419c-f79d-47ad-be07-4f5c0580472b",
                            TwoFactorEnabled = false,
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "e41edcca-174d-4b77-b926-3b242da02fee",
                            AccessFailedCount = 0,
                            Address = "Atatürk Cd. No:15/4 Çankaya",
                            City = "Ankara",
                            ConcurrencyStamp = "791cb032-ccb6-4620-b9c3-f44255ed62c3",
                            DateOfBirth = new DateTime(1988, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.ozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.OZKAN@GMAIL.COM",
                            NormalizedUserName = "MEHMETOZKAN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ed4c5dc-c6b9-44d6-94be-55067ebb789e",
                            TwoFactorEnabled = false,
                            UserName = "mehmetozkan"
                        },
                        new
                        {
                            Id = "88f0eb29-bd71-4273-864c-9842e3b96a27",
                            AccessFailedCount = 0,
                            Address = "Karşıyaka Cd. No:8/3 Alsancak",
                            City = "İzmir",
                            ConcurrencyStamp = "8cb3efed-ffdb-46a3-83c8-b245a947edc0",
                            DateOfBirth = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynep.gunes@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            LastName = "Güneş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.GUNES@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPGUNES",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0672dd42-b338-4402-a0aa-bb8b5ed59395",
                            TwoFactorEnabled = false,
                            UserName = "zeynepgunes"
                        },
                        new
                        {
                            Id = "9b9ec15d-8213-4579-8dce-4b68f5a0011d",
                            AccessFailedCount = 0,
                            Address = "Atatürk Mah. No:4 Bahçelievler",
                            City = "İstanbul",
                            ConcurrencyStamp = "fce9d50d-9cef-4b3b-aff6-47309075a796",
                            DateOfBirth = new DateTime(1990, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.demir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.DEMIR@GMAIL.COM",
                            NormalizedUserName = "ALIDEMIR",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eac91b4e-3aa8-4a85-a7cc-eafc729a07f9",
                            TwoFactorEnabled = false,
                            UserName = "alidemir"
                        },
                        new
                        {
                            Id = "cd43e623-b7f7-4b25-8cd9-6f4f62bc41fd",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Cd. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "cbfd39aa-a0ea-4f06-a3b9-96677df59b00",
                            DateOfBirth = new DateTime(1987, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gizem.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gizem",
                            Gender = "Kadın",
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GIZEMAYDIN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a88f4a8d-f557-48fb-a39a-f83951c28c4f",
                            TwoFactorEnabled = false,
                            UserName = "gizemaydin"
                        },
                        new
                        {
                            Id = "46011f1e-158e-4662-8c72-5780301b9935",
                            AccessFailedCount = 0,
                            Address = "Turan Cd. No:7 Bornova",
                            City = "İzmir",
                            ConcurrencyStamp = "a2976286-fa40-41f0-bf88-6ab06bf95c8f",
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.ergun@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Ergün",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.ERGUN@GMAIL.COM",
                            NormalizedUserName = "CANERGUN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3a476a8-3531-4856-ab40-d448a470a95e",
                            TwoFactorEnabled = false,
                            UserName = "canergun"
                        },
                        new
                        {
                            Id = "53b875d2-c8d2-4241-a2c2-cb2363fed268",
                            AccessFailedCount = 0,
                            Address = "Halilpaşa Konağı Ap. No:18 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "bb879b8b-dbd9-41f4-bd94-61b685638734",
                            DateOfBirth = new DateTime(1985, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deniz@asdasd.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Kartal",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZ@ASDASD.COM",
                            NormalizedUserName = "DENIZ",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5392379-1716-48d7-86df-90c69e476e9b",
                            TwoFactorEnabled = false,
                            UserName = "deniz"
                        },
                        new
                        {
                            Id = "618a9587-0777-4025-a9e8-e00cbf5f8032",
                            AccessFailedCount = 0,
                            Address = "Kuştepe Mah. Gümüşsuyu Cad. No:12 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "d6cb471e-e2d7-475a-80ef-87ac97ea98ba",
                            DateOfBirth = new DateTime(1992, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildirim@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIRIM@HOTMAIL.COM",
                            NormalizedUserName = "ALIYILDIRIM",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e451276d-def5-4bc9-ab41-15ae059fff95",
                            TwoFactorEnabled = false,
                            UserName = "aliyildirim"
                        },
                        new
                        {
                            Id = "0222e488-3879-4166-9b86-9205d177c1d9",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Dereboyu Cad. No:23 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "65e46b41-d30c-4386-9956-f23ff334e9ab",
                            DateOfBirth = new DateTime(1988, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "melis.ozturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melis",
                            Gender = "Kadın",
                            LastName = "Öztürk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELIS.OZTURK@GMAIL.COM",
                            NormalizedUserName = "MELISOZTURK",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02f84f26-443d-4b4b-b93a-20950ee1085f",
                            TwoFactorEnabled = false,
                            UserName = "melisozturk"
                        },
                        new
                        {
                            Id = "d838b305-c9fe-40e8-84ab-1d872299e235",
                            AccessFailedCount = 0,
                            Address = "Mecidiyeköy Mah. Vefa Cad. No:11 Şişli",
                            City = "İstanbul",
                            ConcurrencyStamp = "17d262b5-3cb1-4634-9e02-6718f2bcc955",
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "can.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAN.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "CANSAHIN",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42d27122-0e04-47b8-aa6e-03c9a3d24f20",
                            TwoFactorEnabled = false,
                            UserName = "cansahin"
                        },
                        new
                        {
                            Id = "d1c5bc6f-5e02-410a-9f53-06a80eb712ef",
                            AccessFailedCount = 0,
                            Address = "Etiler Mah. Bebek Cad. No:17 Beşiktaş",
                            City = "İstanbul",
                            ConcurrencyStamp = "9d402df2-1d86-473d-b390-c750a7a72276",
                            DateOfBirth = new DateTime(1983, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esra.avci@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            LastName = "Avcı",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRA.AVCI@GMAIL.COM",
                            NormalizedUserName = "ESRAAVCI",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d24fdda-8c49-421e-8881-b72cbf180906",
                            TwoFactorEnabled = false,
                            UserName = "esraavci"
                        },
                        new
                        {
                            Id = "f0331525-2680-4b01-a168-f766e6660895",
                            AccessFailedCount = 0,
                            Address = "İnönü Cd. No:12/1 Kartal",
                            City = "İstanbul",
                            ConcurrencyStamp = "2280df21-7942-404d-adb2-d425b3c33204",
                            DateOfBirth = new DateTime(1997, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatma.kara@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.KARA@GMAIL.COM",
                            NormalizedUserName = "FATMAKARA",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a89ee05-0e37-41b5-ac43-39ee71751e6a",
                            TwoFactorEnabled = false,
                            UserName = "fatmakara"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6177),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6189),
                            Url = "1.jpg",
                            UserId = "635aaef7-edd5-4d60-ae13-e7c687142967"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6194),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6195),
                            Url = "2.jpg",
                            UserId = "c0c74e57-fc4d-449b-9855-eeb94e6c15ee"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6197),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6197),
                            Url = "3.jpg",
                            UserId = "e41edcca-174d-4b77-b926-3b242da02fee"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6199),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6200),
                            Url = "4.jpg",
                            UserId = "88f0eb29-bd71-4273-864c-9842e3b96a27"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6202),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6202),
                            Url = "5.jpg",
                            UserId = "9b9ec15d-8213-4579-8dce-4b68f5a0011d"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6205),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6206),
                            Url = "6.jpg",
                            UserId = "cd43e623-b7f7-4b25-8cd9-6f4f62bc41fd"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6208),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6208),
                            Url = "7.jpg",
                            UserId = "46011f1e-158e-4662-8c72-5780301b9935"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6210),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6211),
                            Url = "8.jpg",
                            UserId = "53b875d2-c8d2-4241-a2c2-cb2363fed268"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6212),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6213),
                            Url = "9.jpg",
                            UserId = "618a9587-0777-4025-a9e8-e00cbf5f8032"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6216),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6217),
                            Url = "10.jpg",
                            UserId = "0222e488-3879-4166-9b86-9205d177c1d9"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6219),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6219),
                            Url = "11.jpg",
                            UserId = "d838b305-c9fe-40e8-84ab-1d872299e235"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6221),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6222),
                            Url = "12.jpg",
                            UserId = "d1c5bc6f-5e02-410a-9f53-06a80eb712ef"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6223),
                            ModifiedDate = new DateTime(2023, 4, 11, 13, 20, 9, 280, DateTimeKind.Local).AddTicks(6224),
                            Url = "13.jpg",
                            UserId = "f0331525-2680-4b01-a168-f766e6660895"
                        });
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Depresyon belirtileri gösteren kişilere destek olmak ve tedavi sürecinde yardımcı olmak.",
                            Name = "Depresyon"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kaygı bozukluğu yaşayan bireylere destek olmak ve kaygı düzeylerini azaltmak için terapi yöntemleri uygulamak.",
                            Name = "Kaygı Bozukluğu"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bağımlılık sorunu yaşayan kişilere destek sağlamak ve bağımlılıktan kurtulmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Bağımlılık"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Öfke kontrolü sorunu yaşayan bireylere destek vermek ve öfke yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Öfke Kontrolü"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Aile içi ilişkilerde yaşanan sorunlara destek sağlamak ve aile üyelerinin birbirleriyle iletişimini iyileştirmek için terapi yöntemleri uygulamak.",
                            Name = "Aile Terapisi"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Stresli durumlarla başa çıkmada zorlanan bireylere destek vermek ve stres yönetimi becerilerini geliştirmelerine yardımcı olmak.",
                            Name = "Stres Yönetimi"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Bireylerin kendilerini daha iyi tanımalarına ve kişisel gelişimlerine destek olmak için terapi yöntemleri uygulamak.",
                            Name = "Kişisel Gelişim"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Cinsel sorunlar yaşayan bireylere destek sağlamak ve cinsel işlev bozukluklarıyla başa çıkmalarına yardımcı olmak için tedavi yöntemleri uygulamak.",
                            Name = "Cinsel Sorunlar"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Çiftler arasındaki sorunlara destek vermek ve ilişkilerini iyileştirmelerine yardımcı olmak için terapi yöntemleri uygulamak.",
                            Name = "Çift Terapisi"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Travmatik bir olay sonrasında yaşanan stres ve kaygıya destek sağlamak ve travma sonrası stres bozukluğu tedavisi için yöntemler uygulamak.",
                            Name = "Travma Sonrası Stres Bozukluğu"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Yeme bozukluğu yaşayan bireylere destek vermek ve yeme bozukluğu tedavisi için terapi yöntemleri uygulamak.",
                            Name = "Yeme Bozuklukları"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "635aaef7-edd5-4d60-ae13-e7c687142967",
                            RoleId = "c3fd5009-ad6e-4079-a668-7b007c1ac98c"
                        },
                        new
                        {
                            UserId = "c0c74e57-fc4d-449b-9855-eeb94e6c15ee",
                            RoleId = "a743e6cd-3ef3-41fb-8762-15f35532d5bb"
                        },
                        new
                        {
                            UserId = "e41edcca-174d-4b77-b926-3b242da02fee",
                            RoleId = "a743e6cd-3ef3-41fb-8762-15f35532d5bb"
                        },
                        new
                        {
                            UserId = "88f0eb29-bd71-4273-864c-9842e3b96a27",
                            RoleId = "a743e6cd-3ef3-41fb-8762-15f35532d5bb"
                        },
                        new
                        {
                            UserId = "9b9ec15d-8213-4579-8dce-4b68f5a0011d",
                            RoleId = "a743e6cd-3ef3-41fb-8762-15f35532d5bb"
                        },
                        new
                        {
                            UserId = "cd43e623-b7f7-4b25-8cd9-6f4f62bc41fd",
                            RoleId = "a743e6cd-3ef3-41fb-8762-15f35532d5bb"
                        },
                        new
                        {
                            UserId = "46011f1e-158e-4662-8c72-5780301b9935",
                            RoleId = "a743e6cd-3ef3-41fb-8762-15f35532d5bb"
                        },
                        new
                        {
                            UserId = "53b875d2-c8d2-4241-a2c2-cb2363fed268",
                            RoleId = "a743e6cd-3ef3-41fb-8762-15f35532d5bb"
                        },
                        new
                        {
                            UserId = "618a9587-0777-4025-a9e8-e00cbf5f8032",
                            RoleId = "d7fe43d9-043c-4860-afbd-d49707cad173"
                        },
                        new
                        {
                            UserId = "0222e488-3879-4166-9b86-9205d177c1d9",
                            RoleId = "d7fe43d9-043c-4860-afbd-d49707cad173"
                        },
                        new
                        {
                            UserId = "d838b305-c9fe-40e8-84ab-1d872299e235",
                            RoleId = "d7fe43d9-043c-4860-afbd-d49707cad173"
                        },
                        new
                        {
                            UserId = "d1c5bc6f-5e02-410a-9f53-06a80eb712ef",
                            RoleId = "d7fe43d9-043c-4860-afbd-d49707cad173"
                        },
                        new
                        {
                            UserId = "f0331525-2680-4b01-a168-f766e6660895",
                            RoleId = "d7fe43d9-043c-4860-afbd-d49707cad173"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Certificate", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.ConsultantsSpecializations", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.CustomersConsultans", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Customer", "Customer")
                        .WithMany("CustomersConsultans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Education", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", "Consultant")
                        .WithMany("Educations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Image", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", "User")
                        .WithOne("Images")
                        .HasForeignKey("Consultancy_Project.Entity.Concrate.Image", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Specialization", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Consultant", null)
                        .WithMany("Specializations")
                        .HasForeignKey("ConsultantId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Consultancy_Project.Entity.Concrate.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Consultant", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("CustomersConsultans");

                    b.Navigation("Educations");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Customer", b =>
                {
                    b.Navigation("CustomersConsultans");
                });

            modelBuilder.Entity("Consultancy_Project.Entity.Concrate.Identity.User", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
