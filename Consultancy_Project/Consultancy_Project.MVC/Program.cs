using Consultancy_Project.Business.Abstract;
using Consultancy_Project.Business.Concrate;
using Consultancy_Project.Data.Abstract;
using Consultancy_Project.Data.Concrate.EfCore;
using Consultancy_Project.Data.Concrate.EfCore.Context;
using Consultancy_Project.Entity.Concrate.Identity;
using Microsoft.AspNetCore.Cors.Infrastructure;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

builder.Services.AddDbContext<ConsultancyProjectContext>(options => options.UseSqlite(builder.Configuration.GetConnectionString("SqliteConnection")));
builder.Services.AddIdentity<User, Role>()
    .AddEntityFrameworkStores<ConsultancyProjectContext>()
    .AddDefaultTokenProviders();


builder.Services.Configure<IdentityOptions>(options =>
{
    options.Password.RequireDigit = true;//Þifre içinde mutlaka rakam olmalý
    options.Password.RequireLowercase = true;//Þifre içinde mutlaka küçük harf olmalý
    options.Password.RequireUppercase = true;//Þifre içinde mutlaka büyük harf olmalý
    options.Password.RequiredLength = 6; //Uzunluðu 6 karakter olmalý
    options.Password.RequireNonAlphanumeric = true;//Alfanümeric olmayan karakter barýndýrmalý
    //Örnek geçerli parola: Qwe123.

    options.Lockout.MaxFailedAccessAttempts = 3;//Üst üste izin verilecek hatalý giriþ sayýsý 3
    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);//Kilitlenmiþ hesaba 5 dakika sonra giriþ yapýlabilsin

    options.User.RequireUniqueEmail = true;//Sistemde daha önce kayýtlý olmayan bir email adresi ile kayýt olunabilsin
    options.SignIn.RequireConfirmedEmail = false;//Email onayý pasif 
    options.SignIn.RequireConfirmedPhoneNumber = false;//Telefon numarasý onayý pasif
});

builder.Services.ConfigureApplicationCookie(options =>
{
    options.LoginPath = "/account/login";//Eðer kullanýcý eriþebilmesi için login olmak zorunda olduðu bir yere istekte bulunursa, bu sayfaya yönlendirilecek. (account controlleri içindeki login actioný)
    options.LogoutPath = "/account/logout";//Kullanýcý logout olduðunda bu actiona yönlendirilecek.
    options.AccessDeniedPath = "/account/accessdenied";//Kullanýcý yetkisi olmayan bir sayfaya istekte bulunduðunda bu actiona yönlendirilecek.
    options.SlidingExpiration = true;//Cookie yaþam süresinin her istekte sýfýrlanmasýný saðlar. Default olarak yaþam süresi 20 dk, ama biz bunu ayarlayabiliriz.
    options.ExpireTimeSpan = TimeSpan.FromDays(10);//Yaþam süresi 10 gün olacak.
    options.Cookie = new CookieBuilder
    {
        HttpOnly = true,
        SameSite = SameSiteMode.Strict,
        Name = ".Consultancy.Security.Cookie"
    };
});
builder.Services.AddScoped<IImageService, ImageManager>();
builder.Services.AddScoped<IConsultantService, ConsultantManager>();
builder.Services.AddScoped<ICustomerService, CustomerManager>();
builder.Services.AddScoped<ISpecializationService, SpecializationManager>();
builder.Services.AddScoped<IEducationService, EducationManager>();
builder.Services.AddScoped<ICertificateService, CertificateManager>();

builder.Services.AddScoped<IEducationRepository, EFCoreEducationRepository>();
builder.Services.AddScoped<ICertificateRepository, EFCoreCertificateRepository>();
builder.Services.AddScoped<ISpecializationRepository, EfCoreSpecializationRepository>();
builder.Services.AddScoped<ICustomerRepository, EfCoreCustomerRepository>();
builder.Services.AddScoped<IConsultantRepository, EfCoreConsultantRepository>();
builder.Services.AddScoped<IImageRepository, EfCoreImageRepository>();



var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapAreaControllerRoute(
    name: "Admin",
    areaName: "Admin",
    pattern: "admin/{controller=Home}/{action=Index}/{id?}"
    );

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
